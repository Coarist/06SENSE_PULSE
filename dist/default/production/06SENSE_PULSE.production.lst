

Microchip Technology PIC PRO Macro Assembler V1.42 build -159332390 
                                                                                               Wed Mar 11 14:49:38 2020

Microchip Technology Omniscient Code Generator v1.42 (PRO mode) build 201704130522
     1                           	processor	12F675
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	swtext1,local,class=CONST,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	psect	pa_nodes0,global,class=CODE,delta=2
    14                           	dabs	1,0x5E,2
    15  0000                     
    16                           ; Version 1.42
    17                           ; Generated 13/04/2017 GMT
    18                           ; 
    19                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC12F675 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  000A                     	;# 
    57  000B                     	;# 
    58  000C                     	;# 
    59  000E                     	;# 
    60  000E                     	;# 
    61  000F                     	;# 
    62  0010                     	;# 
    63  0019                     	;# 
    64  001E                     	;# 
    65  001F                     	;# 
    66  0081                     	;# 
    67  0085                     	;# 
    68  008C                     	;# 
    69  008E                     	;# 
    70  0090                     	;# 
    71  0095                     	;# 
    72  0096                     	;# 
    73  0096                     	;# 
    74  0099                     	;# 
    75  009A                     	;# 
    76  009A                     	;# 
    77  009B                     	;# 
    78  009C                     	;# 
    79  009D                     	;# 
    80  009E                     	;# 
    81  009F                     	;# 
    82  000B                     _INTCON	set	11
    83  0019                     _CMCON	set	25
    84  0005                     _GPIO	set	5
    85  0001                     _TMR0	set	1
    86  005D                     _T0IE	set	93
    87  0080                     _TMR1ON	set	128
    88  0058                     _GPIF	set	88
    89  0059                     _INTF	set	89
    90  005A                     _T0IF	set	90
    91  0096                     _IOC	set	150
    92  0095                     _WPU	set	149
    93  0085                     _TRISIO	set	133
    94  009F                     _ANSEL	set	159
    95  0081                     _OPTION_REG	set	129
    96  0460                     _TMR1IE	set	1120
    97                           
    98                           ; #config settings
    99  0073                     
   100                           	psect	cinit
   101  000E                     start_initialization:	
   102  000E                     __initialization:	
   103                           
   104                           ; Clear objects allocated to BANK0
   105  000E  01A6               	clrf	__pbssBANK0& (0+127)
   106  000F  01A7               	clrf	(__pbssBANK0+1)& (0+127)
   107  0010                     end_of_initialization:	
   108                           ;End of C runtime variable initialization code
   109                           
   110  0010                     __end_of__initialization:	
   111  0010  0183               	clrf	3
   112  0011  2812               	ljmp	_main	;jump to C main() function
   113                           
   114                           	psect	bssBANK0
   115  0026                     __pbssBANK0:	
   116  0026                     _i:	
   117  0026                     	ds	1
   118  0027                     _crtos2TaskTimer:	
   119  0027                     	ds	1
   120                           
   121                           	psect	cstackCOMMON
   122  0000                     __pcstackCOMMON:	
   123  0000                     ??_task0:	
   124  0000                     ??_main:	
   125                           ; 1 bytes @ 0x0
   126                           
   127                           
   128                           	psect	cstackBANK0
   129  0020                     __pcstackBANK0:	
   130                           ; 1 bytes @ 0x0
   131                           
   132  0020                     ?_task0:	
   133  0020                     ?_IntVector:	
   134                           ; 1 bytes @ 0x0
   135                           
   136  0020                     ??_IntVector:	
   137                           ; 1 bytes @ 0x0
   138                           
   139  0020                     ?_main:	
   140                           ; 1 bytes @ 0x0
   141                           
   142                           
   143                           ; 1 bytes @ 0x0
   144  0020                     	ds	3
   145  0023                     IntVector@ii:	
   146                           
   147                           ; 1 bytes @ 0x3
   148  0023                     	ds	1
   149  0024                     main@t:	
   150                           
   151                           ; 1 bytes @ 0x4
   152  0024                     	ds	1
   153  0025                     main@i:	
   154                           
   155                           ; 1 bytes @ 0x5
   156  0025                     	ds	1
   157                           
   158                           	psect	maintext
   159  0012                     __pmaintext:	
   160 ;;
   161 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   162 ;;
   163 ;; *************** function _main *****************
   164 ;; Defined at:
   165 ;;		line 70 in file "main.c"
   166 ;; Parameters:    Size  Location     Type
   167 ;;		None
   168 ;; Auto vars:     Size  Location     Type
   169 ;;  i               1    5[BANK0 ] unsigned char 
   170 ;;  t               1    4[BANK0 ] unsigned char 
   171 ;; Return value:  Size  Location     Type
   172 ;;                  1    wreg      void 
   173 ;; Registers used:
   174 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   175 ;; Tracked objects:
   176 ;;		On entry : B00/0
   177 ;;		On exit  : 900/0
   178 ;;		Unchanged: 0/0
   179 ;; Data sizes:     COMMON   BANK0
   180 ;;      Params:         0       0
   181 ;;      Locals:         0       2
   182 ;;      Temps:          0       0
   183 ;;      Totals:         0       2
   184 ;;Total ram usage:        2 bytes
   185 ;; Hardware stack levels required when called:    2
   186 ;; This function calls:
   187 ;;		_task0
   188 ;; This function is called by:
   189 ;;		Startup code after reset
   190 ;; This function uses a non-reentrant model
   191 ;;
   192                           
   193                           
   194                           ;psect for function _main
   195  0012                     _main:	
   196                           
   197                           ;main.c: 75: OPTION_REG = (0b01111111) & (0b11010010);
   198                           
   199                           ;incstack = 0
   200                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   201  0012  3052               	movlw	82
   202  0013  1683               	bsf	3,5	;RP0=1, select bank1
   203  0014  0081               	movwf	1	;volatile
   204                           
   205                           ;main.c: 81: GPIO = 0b00000000;
   206  0015  1283               	bcf	3,5	;RP0=0, select bank0
   207  0016  0185               	clrf	5	;volatile
   208                           
   209                           ;main.c: 82: CMCON = 0b00000111;
   210  0017  3007               	movlw	7
   211  0018  0099               	movwf	25	;volatile
   212                           
   213                           ;main.c: 83: ANSEL = 0b00000000;
   214  0019  1683               	bsf	3,5	;RP0=1, select bank1
   215  001A  019F               	clrf	31	;volatile
   216                           
   217                           ;main.c: 84: TRISIO = (0b00100001);
   218  001B  3021               	movlw	33
   219  001C  0085               	movwf	5	;volatile
   220                           
   221                           ;main.c: 85: WPU = (0b00100000);
   222  001D  3020               	movlw	32
   223  001E  0095               	movwf	21	;volatile
   224                           
   225                           ;main.c: 86: IOC = (0b00100000);
   226  001F  0096               	movwf	22	;volatile
   227                           
   228                           ;main.c: 91: INTCON = 0x20 | 0x80 | 0x40;
   229  0020  30E0               	movlw	224
   230  0021  008B               	movwf	11	;volatile
   231                           
   232                           ;main.c: 92: TMR1ON = TMR1IE = 1;
   233  0022  140C               	bsf	12,0	;volatile
   234  0023  1C0C               	btfss	12,0	;volatile
   235  0024  2828               	goto	u110
   236  0025  1283               	bcf	3,5	;RP0=0, select bank0
   237  0026  1410               	bsf	16,0	;volatile
   238  0027  282A               	goto	l55
   239  0028                     u110:	
   240  0028  1283               	bcf	3,5	;RP0=0, select bank0
   241  0029  1010               	bcf	16,0	;volatile
   242  002A                     l55:	
   243                           ;main.c: 97: CRTOS2_TASK_ID i;
   244                           ;main.c: 98: CRTOS2_T_TIMER t;
   245                           ;main.c: 103: for(;;)
   246                           
   247  002A  0064               	clrwdt	;# 
   248                           
   249                           ;main.c: 106: {if((++i)>=(1)){i=0;}};
   250  002B  1283               	bcf	3,5	;RP0=0, select bank0
   251  002C  0FA5               	incfsz	main@i,f
   252  002D  01A5               	clrf	main@i
   253                           
   254                           ;main.c: 107: { T0IE = 0; t = crtos2TaskTimer[(i)]; T0IE = 1; };
   255  002E  128B               	bcf	11,5	;volatile
   256  002F  0825               	movf	main@i,w
   257  0030  3E27               	addlw	(low (_crtos2TaskTimer| 0))& (0+255)
   258  0031  0084               	movwf	4
   259  0032  1383               	bcf	3,7	;select IRP bank0
   260  0033  0800               	movf	0,w
   261  0034  00A4               	movwf	main@t
   262  0035  168B               	bsf	11,5	;volatile
   263                           
   264                           ;main.c: 109: if (t) {continue;}
   265  0036  0824               	movf	main@t,w
   266  0037  1D03               	btfss	3,2
   267  0038  282A               	goto	l55
   268  0039  283D               	goto	l786
   269  003A                     l782:	
   270  003A  206B               	fcall	_task0
   271  003B  00A4               	movwf	main@t
   272  003C  2842               	goto	l61
   273  003D                     l786:	
   274  003D  0825               	movf	main@i,w
   275                           
   276                           ; Switch size 1, requested type "speed"
   277                           ; Number of cases is 1, Range of values is 0 to 0
   278                           ; switch strategies available:
   279                           ; Name         Instructions Cycles
   280                           ; simple_byte            4     3 (average)
   281                           ; direct_byte            7     6 (fixed)
   282                           ; jumptable            260     6 (fixed)
   283                           ;	Chosen strategy is simple_byte
   284  003E  3A00               	xorlw	0	; case 0
   285  003F  1903               	skipnz
   286  0040  283A               	goto	l782
   287  0041  282A               	goto	l55
   288  0042                     l61:	
   289                           
   290                           ;main.c: 118: { T0IE = 0; crtos2TaskTimer[(i)] = t; T0IE = 1; };
   291  0042  128B               	bcf	11,5	;volatile
   292  0043  0825               	movf	main@i,w
   293  0044  3E27               	addlw	(low (_crtos2TaskTimer| 0))& (0+255)
   294  0045  0084               	movwf	4
   295  0046  0824               	movf	main@t,w
   296  0047  0080               	movwf	0
   297  0048  168B               	bsf	11,5	;volatile
   298  0049  282A               	goto	l55
   299  004A                     __end_of_main:	
   300                           
   301                           	psect	text1
   302  006B                     __ptext1:	
   303 ;; *************** function _task0 *****************
   304 ;; Defined at:
   305 ;;		line 20 in file "task0.c"
   306 ;; Parameters:    Size  Location     Type
   307 ;;		None
   308 ;; Auto vars:     Size  Location     Type
   309 ;;		None
   310 ;; Return value:  Size  Location     Type
   311 ;;                  1    wreg      unsigned char 
   312 ;; Registers used:
   313 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   314 ;; Tracked objects:
   315 ;;		On entry : 900/0
   316 ;;		On exit  : 900/0
   317 ;;		Unchanged: 800/0
   318 ;; Data sizes:     COMMON   BANK0
   319 ;;      Params:         0       0
   320 ;;      Locals:         0       0
   321 ;;      Temps:          0       0
   322 ;;      Totals:         0       0
   323 ;;Total ram usage:        0 bytes
   324 ;; Hardware stack levels used:    1
   325 ;; Hardware stack levels required when called:    1
   326 ;; This function calls:
   327 ;;		Nothing
   328 ;; This function is called by:
   329 ;;		_main
   330 ;; This function uses a non-reentrant model
   331 ;;
   332                           
   333                           
   334                           ;psect for function _task0
   335  006B                     _task0:	
   336                           
   337                           ;task0.c: 22: switch(i)
   338                           
   339                           ;incstack = 0
   340                           ; Regs used in _task0: [wreg-fsr0h+status,2+status,0]
   341  006B  286F               	goto	l712
   342  006C                     l702:	
   343  006C  3000               	movlw	0
   344  006D  01A6               	clrf	_i
   345  006E  0008               	return
   346  006F                     l712:	
   347  006F  0826               	movf	_i,w
   348                           
   349                           ; Switch size 1, requested type "speed"
   350                           ; Number of cases is 3, Range of values is 0 to 2
   351                           ; switch strategies available:
   352                           ; Name         Instructions Cycles
   353                           ; direct_byte            9     6 (fixed)
   354                           ; simple_byte           10     6 (average)
   355                           ; jumptable            260     6 (fixed)
   356                           ;	Chosen strategy is direct_byte
   357  0070  0084               	movwf	4
   358  0071  3003               	movlw	3
   359  0072  0204               	subwf	4,w
   360  0073  1803               	skipnc
   361  0074  286C               	goto	l702
   362  0075  3000               	movlw	high S812
   363  0076  008A               	movwf	10
   364  0077  307D               	movlw	low S812
   365  0078  0704               	addwf	4,w
   366  0079  0082               	movwf	2
   367  007A                     l714:	
   368                           
   369                           ;task0.c: 32: i = 0;
   370  007A  01A6               	clrf	_i
   371                           
   372                           ;task0.c: 35: ++i;
   373  007B  0AA6               	incf	_i,f
   374  007C                     l718:	
   375  007C  3401               	retlw	1
   376  007D                     __end_of_task0:	
   377                           
   378                           	psect	swtext1
   379  007D                     __pswtext1:	
   380  007D                     S812:	
   381  007D  287A               	ljmp	l714
   382  007E  287C               	ljmp	l718
   383  007F  287C               	ljmp	l718
   384                           
   385                           	psect	text2
   386  004A                     __ptext2:	
   387 ;; *************** function _IntVector *****************
   388 ;; Defined at:
   389 ;;		line 51 in file "main.c"
   390 ;; Parameters:    Size  Location     Type
   391 ;;		None
   392 ;; Auto vars:     Size  Location     Type
   393 ;;  ii              1    3[BANK0 ] PTR unsigned char 
   394 ;;		 -> crtos2TaskTimer(1), 
   395 ;; Return value:  Size  Location     Type
   396 ;;                  1    wreg      void 
   397 ;; Registers used:
   398 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   399 ;; Tracked objects:
   400 ;;		On entry : 0/0
   401 ;;		On exit  : 100/0
   402 ;;		Unchanged: 0/0
   403 ;; Data sizes:     COMMON   BANK0
   404 ;;      Params:         0       0
   405 ;;      Locals:         0       1
   406 ;;      Temps:          0       3
   407 ;;      Totals:         0       4
   408 ;;Total ram usage:        4 bytes
   409 ;; Hardware stack levels used:    1
   410 ;; This function calls:
   411 ;;		Nothing
   412 ;; This function is called by:
   413 ;;		Interrupt level 1
   414 ;; This function uses a non-reentrant model
   415 ;;
   416                           
   417                           
   418                           ;psect for function _IntVector
   419  004A                     _IntVector:	
   420                           
   421                           ;main.c: 53: if (T0IF)
   422  004A  1D0B               	btfss	11,2	;volatile
   423  004B  2860               	goto	i1l45
   424                           
   425                           ;main.c: 54: {
   426                           ;main.c: 55: TMR0 -= (125);
   427  004C  307D               	movlw	125
   428  004D  0281               	subwf	1,f	;volatile
   429                           
   430                           ;main.c: 56: { unsigned char *ii = crtos2TaskTimer; while (ii < &crtos2TaskTimer[(1)]) {
      +                           if(*ii){--*ii;} ++ii; } };
   431  004E  3027               	movlw	(low (_crtos2TaskTimer| 0))& (0+255)
   432  004F  00A3               	movwf	IntVector@ii
   433  0050                     i1l750:	
   434  0050  3028               	movlw	(low ((_crtos2TaskTimer| 0+1)))& (0+255)
   435  0051  0223               	subwf	IntVector@ii,w
   436  0052  1803               	btfsc	3,0
   437  0053  285F               	goto	i1l49
   438  0054  0823               	movf	IntVector@ii,w
   439  0055  0084               	movwf	4
   440  0056  1383               	bcf	3,7	;select IRP bank0
   441  0057  0800               	movf	0,w
   442  0058  1903               	btfsc	3,2
   443  0059  285D               	goto	i1l748
   444  005A  0823               	movf	IntVector@ii,w
   445  005B  0084               	movwf	4
   446  005C  0380               	decf	0,f
   447  005D                     i1l748:	
   448  005D  0AA3               	incf	IntVector@ii,f
   449  005E  2850               	goto	i1l750
   450  005F                     i1l49:	
   451                           
   452                           ;main.c: 57: T0IF = 0;
   453  005F  110B               	bcf	11,2	;volatile
   454  0060                     i1l45:	
   455                           
   456                           ;main.c: 58: }
   457                           ;main.c: 64: INTF = GPIF = 0;
   458  0060  100B               	bcf	11,0	;volatile
   459  0061  108B               	bcf	11,1	;volatile
   460  0062  0822               	movf	??_IntVector+2,w
   461  0063  008A               	movwf	10
   462  0064  0821               	movf	??_IntVector+1,w
   463  0065  0084               	movwf	4
   464  0066  0E20               	swapf	??_IntVector^0,w
   465  0067  0083               	movwf	3
   466  0068  0EDE               	swapf	94,f
   467  0069  0E5E               	swapf	94,w
   468  006A  0009               	retfie
   469  006B                     __end_of_IntVector:	
   470  005E                     btemp	set	94	;btemp
   471  005E                     wtemp0	set	94
   472                           
   473                           	psect	intentry
   474  0004                     __pintentry:	
   475                           ;incstack = 0
   476                           ; Regs used in _IntVector: [wreg-fsr0h+status,2+status,0]
   477                           
   478  0004                     interrupt_function:	
   479  005E                     saved_w	set	btemp
   480  0004  00DE               	movwf	btemp
   481  0005  0E03               	swapf	3,w
   482  0006  1283               	bcf	3,5	;RP0=0, select bank0
   483  0007  00A0               	movwf	??_IntVector
   484  0008  0804               	movf	4,w
   485  0009  00A1               	movwf	??_IntVector+1
   486  000A  080A               	movf	10,w
   487  000B  00A2               	movwf	??_IntVector+2
   488  000C  284A               	ljmp	_IntVector


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62      6       8

Pointer List with Targets:

    IntVector@ii	PTR unsigned char  size(1) Largest target is 1
		 -> crtos2TaskTimer(BANK0[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _IntVector in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _IntVector in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     135
                                              4 BANK0      2     2      0
                              _task0
 ---------------------------------------------------------------------------------
 (1) _task0                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _IntVector                                            4     4      0      68
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _task0

 _IntVector (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            0      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            3E      0       0       3        0.0%
BANK0               3E      6       8       4       12.9%
ABS                  0      0       8       5        0.0%
DATA                 0      0       8       6        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Wed Mar 11 14:49:38 2020

             __CFG_CP$ON 0000                        _i 0026                        pc 0002  
                     l61 0042                       l55 002A                       fsr 0004  
                    S812 007D                      l702 006C                      l712 006F  
                    l714 007A                      l718 007C                      l782 003A  
                    l786 003D                      _IOC 0096                      u110 0028  
           __CFG_CPD$OFF 0000                      _WPU 0095                      fsr0 0004  
                    indf 0000             __CFG_IDLOC0$ 0070             __CFG_IDLOC1$ 0075  
           __CFG_IDLOC2$ 006C             __CFG_IDLOC3$ 0073             __CFG_WDTE$ON 0000  
                   _T0IE 005D                     _T0IF 005A                     _GPIF 0058  
                   _GPIO 0005                     _INTF 0059                     i1l45 0060  
                   i1l49 005F                     _TMR0 0001                     _main 0012  
                   btemp 005E            __CFG_BOREN$ON 0000                     start 000D  
                  ?_main 0020                    _CMCON 0019                    _ANSEL 009F  
                  i1l750 0050                    i1l748 005D            __CFG_PWRTE$ON 0000  
                  _task0 006B                    main@i 0025                    main@t 0024  
                  pclath 000A              IntVector@ii 0023                    status 0003  
                  wtemp0 005E           __CFG_MCLRE$OFF 0000          __initialization 000E  
           __end_of_main 004A                   ??_main 0000                   ?_task0 0020  
                 _INTCON 000B                   _TMR1IE 0460                   _TMR1ON 0080  
                 _TRISIO 0085       __size_of_IntVector 0021                   saved_w 005E  
__end_of__initialization 0010           __pcstackCOMMON 0000            __end_of_task0 007D  
      __end_of_IntVector 006B                  ??_task0 0000               __pbssBANK0 0026  
             __pmaintext 0012               __pintentry 0004                  __ptext1 006B  
                __ptext2 004A     end_of_initialization 0010          _crtos2TaskTimer 0027  
    start_initialization 000E                _IntVector 004A                ___latbits 0000  
          __pcstackBANK0 0020               ?_IntVector 0020                __pswtext1 007D  
         __size_of_task0 0012        interrupt_function 0004              ??_IntVector 0020  
          __size_of_main 0038                 intlevel1 0000               _OPTION_REG 0081  
      __CFG_FOSC$INTRCIO 0000  
