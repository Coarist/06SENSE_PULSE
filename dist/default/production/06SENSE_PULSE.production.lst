

Microchip Technology PIC PRO Macro Assembler V1.43 build -156212558 
                                                                                               Fri Mar 13 22:04:47 2020

Microchip Technology Omniscient Code Generator v1.43 (PRO mode) build 201707250354
     1                           	processor	12F675
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	eeprom_data,global,class=EEDATA,space=3,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	swtext1,local,class=CONST,delta=2
    14                           	psect	opParam,global,class=CODE,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	audVis,global,class=CODE,delta=2
    18                           	psect	alarm,global,class=CODE,delta=2
    19                           	psect	swtext2,local,class=CONST,delta=2
    20                           	psect	text13,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	psect	pa_nodes0,global,class=CODE,delta=2
    23                           	dabs	1,0x5E,2
    24  0000                     
    25                           ; Version 1.43
    26                           ; Generated 25/07/2017 GMT
    27                           ; 
    28                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC12F675 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     	;# 
    60  0001                     	;# 
    61  0002                     	;# 
    62  0003                     	;# 
    63  0004                     	;# 
    64  0005                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0019                     	;# 
    73  001E                     	;# 
    74  001F                     	;# 
    75  0081                     	;# 
    76  0085                     	;# 
    77  008C                     	;# 
    78  008E                     	;# 
    79  0090                     	;# 
    80  0095                     	;# 
    81  0096                     	;# 
    82  0096                     	;# 
    83  0099                     	;# 
    84  009A                     	;# 
    85  009A                     	;# 
    86  009B                     	;# 
    87  009C                     	;# 
    88  009D                     	;# 
    89  009E                     	;# 
    90  009F                     	;# 
    91  0000                     	;# 
    92  0001                     	;# 
    93  0002                     	;# 
    94  0003                     	;# 
    95  0004                     	;# 
    96  0005                     	;# 
    97  000A                     	;# 
    98  000B                     	;# 
    99  000C                     	;# 
   100  000E                     	;# 
   101  000E                     	;# 
   102  000F                     	;# 
   103  0010                     	;# 
   104  0019                     	;# 
   105  001E                     	;# 
   106  001F                     	;# 
   107  0081                     	;# 
   108  0085                     	;# 
   109  008C                     	;# 
   110  008E                     	;# 
   111  0090                     	;# 
   112  0095                     	;# 
   113  0096                     	;# 
   114  0096                     	;# 
   115  0099                     	;# 
   116  009A                     	;# 
   117  009A                     	;# 
   118  009B                     	;# 
   119  009C                     	;# 
   120  009D                     	;# 
   121  009E                     	;# 
   122  009F                     	;# 
   123  0000                     	;# 
   124  0001                     	;# 
   125  0002                     	;# 
   126  0003                     	;# 
   127  0004                     	;# 
   128  0005                     	;# 
   129  000A                     	;# 
   130  000B                     	;# 
   131  000C                     	;# 
   132  000E                     	;# 
   133  000E                     	;# 
   134  000F                     	;# 
   135  0010                     	;# 
   136  0019                     	;# 
   137  001E                     	;# 
   138  001F                     	;# 
   139  0081                     	;# 
   140  0085                     	;# 
   141  008C                     	;# 
   142  008E                     	;# 
   143  0090                     	;# 
   144  0095                     	;# 
   145  0096                     	;# 
   146  0096                     	;# 
   147  0099                     	;# 
   148  009A                     	;# 
   149  009A                     	;# 
   150  009B                     	;# 
   151  009C                     	;# 
   152  009D                     	;# 
   153  009E                     	;# 
   154  009F                     	;# 
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  000A                     	;# 
   162  000B                     	;# 
   163  000C                     	;# 
   164  000E                     	;# 
   165  000E                     	;# 
   166  000F                     	;# 
   167  0010                     	;# 
   168  0019                     	;# 
   169  001E                     	;# 
   170  001F                     	;# 
   171  0081                     	;# 
   172  0085                     	;# 
   173  008C                     	;# 
   174  008E                     	;# 
   175  0090                     	;# 
   176  0095                     	;# 
   177  0096                     	;# 
   178  0096                     	;# 
   179  0099                     	;# 
   180  009A                     	;# 
   181  009A                     	;# 
   182  009B                     	;# 
   183  009C                     	;# 
   184  009D                     	;# 
   185  009E                     	;# 
   186  009F                     	;# 
   187                           
   188                           	psect	eeprom_data
   189  0000  0000 0000 0000 0000 0000 0000 0000 0000 	db	0,0,0,0,0,0,0,0	;# 
   190  0008  0032 00FF 00FF 00FF 00FF 00FF 00FF 00FF 	db	50,255,255,255,255,255,255,255	;# 
   191  0000                     	;# 
   192  0001                     	;# 
   193  0002                     	;# 
   194  0003                     	;# 
   195  0004                     	;# 
   196  0005                     	;# 
   197  000A                     	;# 
   198  000B                     	;# 
   199  000C                     	;# 
   200  000E                     	;# 
   201  000E                     	;# 
   202  000F                     	;# 
   203  0010                     	;# 
   204  0019                     	;# 
   205  001E                     	;# 
   206  001F                     	;# 
   207  0081                     	;# 
   208  0085                     	;# 
   209  008C                     	;# 
   210  008E                     	;# 
   211  0090                     	;# 
   212  0095                     	;# 
   213  0096                     	;# 
   214  0096                     	;# 
   215  0099                     	;# 
   216  009A                     	;# 
   217  009A                     	;# 
   218  009B                     	;# 
   219  009C                     	;# 
   220  009D                     	;# 
   221  009E                     	;# 
   222  009F                     	;# 
   223                           
   224                           	psect	idataBANK0
   225  0000                     __pidataBANK0:	
   226  000B                     _INTCONbits	set	11
   227  000B                     _INTCON	set	11
   228  0010                     _T1CON	set	16
   229  0019                     _CMCON	set	25
   230  0005                     _GPIO	set	5
   231  000E                     _TMR1L	set	14
   232  000F                     _TMR1H	set	15
   233  0001                     _TMR0	set	1
   234  0029                     _GPIO1	set	41
   235  002C                     _GPIO4	set	44
   236  002A                     _GPIO2	set	42
   237  005D                     _T0IE	set	93
   238  005F                     _GIE	set	95
   239  0080                     _TMR1ON	set	128
   240  002D                     _GPIO5	set	45
   241  0058                     _GPIF	set	88
   242  0060                     _TMR1IF	set	96
   243  005A                     _T0IF	set	90
   244  009D                     _EECON2	set	157
   245  009C                     _EECON1bits	set	156
   246  009A                     _EEDATA	set	154
   247  009B                     _EEADR	set	155
   248  0096                     _IOC	set	150
   249  0095                     _WPU	set	149
   250  0085                     _TRISIO	set	133
   251  009F                     _ANSEL	set	159
   252  0081                     _OPTION_REG	set	129
   253  0460                     _TMR1IE	set	1120
   254                           
   255                           ; #config settings
   256  0073                     
   257                           	psect	cinit
   258  000E                     start_initialization:	
   259  000E                     __initialization:	
   260                           
   261                           ;initializer for _sampleInterval
   262  000E  3032               	movlw	50
   263  000F  00CE               	movwf	__pdataBANK0& (0+127)
   264  0010  3020               	movlw	low __pbssBANK0
   265                           
   266                           ; Clear objects allocated to BANK0
   267  0011  1383               	bcf	3,7	;select IRP bank0
   268  0012  0084               	movwf	4
   269  0013  303E               	movlw	low (__pbssBANK0+30)
   270  0014  2278               	fcall	clear_ram0
   271  0015                     end_of_initialization:	
   272                           ;End of C runtime variable initialization code
   273                           
   274  0015                     __end_of__initialization:	
   275  0015  0183               	clrf	3
   276  0016  2A18               	ljmp	_main	;jump to C main() function
   277                           
   278                           	psect	bssBANK0
   279  0020                     __pbssBANK0:	
   280  0020                     _mAlarmLevel:	
   281  0020                     	ds	4
   282  0024                     _pAlarmLevel:	
   283  0024                     	ds	4
   284  0028                     _pulseInterval:	
   285  0028                     	ds	4
   286  002C                     _tmr1Hi16:	
   287  002C                     	ds	4
   288  0030                     _i:	
   289  0030                     	ds	1
   290  0031                     _samplingCount:	
   291  0031                     	ds	1
   292  0032                     _tmr1Overflowed32:	
   293  0032                     	ds	1
   294  0033                     _avc:	
   295  0033                     	ds	8
   296  003B                     _crtos2TaskTimer:	
   297  003B                     	ds	3
   298                           
   299                           	psect	dataBANK0
   300  004E                     __pdataBANK0:	
   301  004E                     _sampleInterval:	
   302  004E                     	ds	1
   303                           
   304                           	psect	clrtext
   305  0278                     clear_ram0:	
   306                           ;	Called with FSR containing the base address, and
   307                           ;	W with the last address+1
   308                           
   309  0278  0064               	clrwdt	;clear the watchdog before getting into this loop
   310  0279                     clrloop0:	
   311  0279  0180               	clrf	0	;clear RAM location pointed to by FSR
   312  027A  0A84               	incf	4,f	;increment pointer
   313  027B  0604               	xorwf	4,w	;XOR with final address
   314  027C  1903               	btfsc	3,2	;have we reached the end yet?
   315  027D  3400               	retlw	0	;all done for this memory range, return
   316  027E  0604               	xorwf	4,w	;XOR again to restore value
   317  027F  2A79               	goto	clrloop0	;do the next byte
   318                           
   319                           	psect	cstackCOMMON
   320  0000                     __pcstackCOMMON:	
   321  0000                     ??_av_control_task_init:	
   322  0000                     ??_alarm_init:	
   323                           ; 1 bytes @ 0x0
   324                           
   325  0000                     ??_opSetMainAlarmFromEE:	
   326                           ; 1 bytes @ 0x0
   327                           
   328  0000                     ??_opSetAlarmSamplingFromEE:	
   329                           ; 1 bytes @ 0x0
   330                           
   331  0000                     ??_alarm_task:	
   332                           ; 1 bytes @ 0x0
   333                           
   334  0000                     ??_av_control_task:	
   335                           ; 1 bytes @ 0x0
   336                           
   337  0000                     ??_set_threshold_task:	
   338                           ; 1 bytes @ 0x0
   339                           
   340  0000                     ??_opSetMainAlarmByValue:	
   341                           ; 1 bytes @ 0x0
   342                           
   343  0000                     ??_DATAEE_WriteByte:	
   344                           ; 1 bytes @ 0x0
   345                           
   346  0000                     ??_DATAEE_ReadByte:	
   347                           ; 1 bytes @ 0x0
   348                           
   349  0000                     ??_main:	
   350                           ; 1 bytes @ 0x0
   351                           
   352  0000                     ??_opSetMainAlarmFromCapture:	
   353                           ; 1 bytes @ 0x0
   354                           
   355                           
   356                           	psect	cstackBANK0
   357  003E                     __pcstackBANK0:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  003E                     ?_av_control_task_init:	
   361  003E                     ?_alarm_init:	
   362                           ; 1 bytes @ 0x0
   363                           
   364  003E                     ?_opSetMainAlarmFromEE:	
   365                           ; 1 bytes @ 0x0
   366                           
   367  003E                     ?_opSetAlarmSamplingFromEE:	
   368                           ; 1 bytes @ 0x0
   369                           
   370  003E                     ?_alarm_task:	
   371                           ; 1 bytes @ 0x0
   372                           
   373  003E                     ?_av_control_task:	
   374                           ; 1 bytes @ 0x0
   375                           
   376  003E                     ?_set_threshold_task:	
   377                           ; 1 bytes @ 0x0
   378                           
   379  003E                     ?_DATAEE_ReadByte:	
   380                           ; 1 bytes @ 0x0
   381                           
   382  003E                     ?_IntVector:	
   383                           ; 1 bytes @ 0x0
   384                           
   385  003E                     ??_IntVector:	
   386                           ; 1 bytes @ 0x0
   387                           
   388  003E                     ?_main:	
   389                           ; 1 bytes @ 0x0
   390                           
   391  003E                     ?_opSetMainAlarmFromCapture:	
   392                           ; 1 bytes @ 0x0
   393                           
   394                           
   395                           ; 1 bytes @ 0x0
   396  003E                     	ds	3
   397  0041                     IntVector@ii:	
   398                           
   399                           ; 1 bytes @ 0x3
   400  0041                     	ds	1
   401  0042                     ?_avControl:	
   402  0042                     ?_DATAEE_WriteByte:	
   403                           ; 1 bytes @ 0x4
   404                           
   405  0042                     avControl@mode:	
   406                           ; 1 bytes @ 0x4
   407                           
   408  0042                     DATAEE_WriteByte@bData:	
   409                           ; 1 bytes @ 0x4
   410                           
   411  0042                     DATAEE_ReadByte@bAdd:	
   412                           ; 1 bytes @ 0x4
   413                           
   414                           
   415                           ; 1 bytes @ 0x4
   416  0042                     	ds	1
   417  0043                     ??_avControl:	
   418  0043                     DATAEE_WriteByte@bAdd:	
   419                           ; 1 bytes @ 0x5
   420                           
   421  0043                     opSetMainAlarmFromEE@x:	
   422                           ; 1 bytes @ 0x5
   423                           
   424                           
   425                           ; 4 bytes @ 0x5
   426  0043                     	ds	1
   427  0044                     ?_opSetMainAlarmByValue:	
   428  0044                     avControl@item:	
   429                           ; 1 bytes @ 0x6
   430                           
   431  0044                     opSetMainAlarmByValue@x:	
   432                           ; 1 bytes @ 0x6
   433                           
   434                           
   435                           ; 4 bytes @ 0x6
   436  0044                     	ds	1
   437  0045                     avControl@c:	
   438                           
   439                           ; 1 bytes @ 0x7
   440  0045                     	ds	1
   441  0046                     alarm_task@x:	
   442                           
   443                           ; 4 bytes @ 0x8
   444  0046                     	ds	2
   445  0048                     opSetMainAlarmFromCapture@x:	
   446                           
   447                           ; 4 bytes @ 0xA
   448  0048                     	ds	4
   449  004C                     main@t:	
   450                           
   451                           ; 1 bytes @ 0xE
   452  004C                     	ds	1
   453  004D                     main@i:	
   454                           
   455                           ; 1 bytes @ 0xF
   456  004D                     	ds	1
   457                           
   458                           	psect	maintext
   459  0218                     __pmaintext:	
   460 ;;
   461 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   462 ;;
   463 ;; *************** function _main *****************
   464 ;; Defined at:
   465 ;;		line 143 in file "main.c"
   466 ;; Parameters:    Size  Location     Type
   467 ;;		None
   468 ;; Auto vars:     Size  Location     Type
   469 ;;  i               1   15[BANK0 ] unsigned char 
   470 ;;  t               1   14[BANK0 ] unsigned char 
   471 ;; Return value:  Size  Location     Type
   472 ;;                  1    wreg      void 
   473 ;; Registers used:
   474 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   475 ;; Tracked objects:
   476 ;;		On entry : B00/0
   477 ;;		On exit  : 900/0
   478 ;;		Unchanged: 0/0
   479 ;; Data sizes:     COMMON   BANK0
   480 ;;      Params:         0       0
   481 ;;      Locals:         0       2
   482 ;;      Temps:          0       0
   483 ;;      Totals:         0       2
   484 ;;Total ram usage:        2 bytes
   485 ;; Hardware stack levels required when called:    5
   486 ;; This function calls:
   487 ;;		_alarm_init
   488 ;;		_alarm_task
   489 ;;		_av_control_task
   490 ;;		_av_control_task_init
   491 ;;		_opSetAlarmSamplingFromEE
   492 ;;		_opSetMainAlarmFromEE
   493 ;;		_set_threshold_task
   494 ;; This function is called by:
   495 ;;		Startup code after reset
   496 ;; This function uses a non-reentrant model
   497 ;;
   498                           
   499                           
   500                           ;psect for function _main
   501  0218                     _main:	
   502                           
   503                           ;main.c: 148: OPTION_REG = (0b01111111) & (0b11010010);
   504                           
   505                           ;incstack = 0
   506                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   507  0218  3052               	movlw	82
   508  0219  1683               	bsf	3,5	;RP0=1, select bank1
   509  021A  0081               	movwf	1	;volatile
   510                           
   511                           ;main.c: 149: GIE = 0;
   512  021B  138B               	bcf	11,7	;volatile
   513                           
   514                           ;main.c: 155: GPIO = 0b00000000;
   515  021C  1283               	bcf	3,5	;RP0=0, select bank0
   516  021D  0185               	clrf	5	;volatile
   517                           
   518                           ;main.c: 156: CMCON = 0b00000111;
   519  021E  3007               	movlw	7
   520  021F  0099               	movwf	25	;volatile
   521                           
   522                           ;main.c: 157: ANSEL = 0b00000000;
   523  0220  1683               	bsf	3,5	;RP0=1, select bank1
   524  0221  019F               	clrf	31	;volatile
   525                           
   526                           ;main.c: 158: TRISIO = (0b00100011);
   527  0222  3023               	movlw	35
   528  0223  0085               	movwf	5	;volatile
   529                           
   530                           ;main.c: 159: WPU = (0b00100010);
   531  0224  3022               	movlw	34
   532  0225  0095               	movwf	21	;volatile
   533                           
   534                           ;main.c: 160: IOC = (0b00100000);
   535  0226  3020               	movlw	32
   536  0227  0096               	movwf	22	;volatile
   537                           
   538                           ;main.c: 161: T1CON = (0b00000000);
   539  0228  1283               	bcf	3,5	;RP0=0, select bank0
   540  0229  0190               	clrf	16	;volatile
   541                           
   542                           ;main.c: 168: TMR1ON = TMR1IE = 1;
   543  022A  1683               	bsf	3,5	;RP0=1, select bank1
   544  022B  140C               	bsf	12,0	;volatile
   545  022C  1C0C               	btfss	12,0	;volatile
   546  022D  2A31               	goto	u690
   547  022E  1283               	bcf	3,5	;RP0=0, select bank0
   548  022F  1410               	bsf	16,0	;volatile
   549  0230  2A33               	goto	l1405
   550  0231                     u690:	
   551  0231  1283               	bcf	3,5	;RP0=0, select bank0
   552  0232  1010               	bcf	16,0	;volatile
   553  0233                     l1405:	
   554                           
   555                           ;main.c: 173: av_control_task_init();
   556  0233  2017               	fcall	_av_control_task_init
   557                           
   558                           ;main.c: 174: alarm_init();
   559  0234  213A               	fcall	_alarm_init
   560                           
   561                           ;main.c: 175: opSetMainAlarmFromEE();
   562  0235  2199               	fcall	_opSetMainAlarmFromEE
   563                           
   564                           ;main.c: 176: opSetAlarmSamplingFromEE();
   565  0236  21B2               	fcall	_opSetAlarmSamplingFromEE
   566                           
   567                           ;main.c: 181: INTCON = 0x20 | 0x80 | 0x40;
   568  0237  30E0               	movlw	224
   569  0238  008B               	movwf	11	;volatile
   570  0239                     l86:	
   571                           ;main.c: 186: CRTOS2_TASK_ID i;
   572                           ;main.c: 187: CRTOS2_T_TIMER t;
   573                           ;main.c: 192: for(;;)
   574                           
   575  0239  0064               	clrwdt	;# 
   576                           
   577                           ;main.c: 195: {if((++i)>=(3)){i=0;}};
   578  023A  3003               	movlw	3
   579  023B  1283               	bcf	3,5	;RP0=0, select bank0
   580  023C  0ACD               	incf	main@i,f
   581  023D  024D               	subwf	main@i,w
   582  023E  1803               	btfsc	3,0
   583  023F  01CD               	clrf	main@i
   584                           
   585                           ;main.c: 196: { T0IE = 0; t = crtos2TaskTimer[(i)]; T0IE = 1; };
   586  0240  128B               	bcf	11,5	;volatile
   587  0241  084D               	movf	main@i,w
   588  0242  3E3B               	addlw	(low (_crtos2TaskTimer| 0))& (0+255)
   589  0243  0084               	movwf	4
   590  0244  1383               	bcf	3,7	;select IRP bank0
   591  0245  0800               	movf	0,w
   592  0246  00CC               	movwf	main@t
   593  0247  168B               	bsf	11,5	;volatile
   594                           
   595                           ;main.c: 198: if (t) {continue;}
   596  0248  084C               	movf	main@t,w
   597  0249  1D03               	btfss	3,2
   598  024A  2A39               	goto	l86
   599  024B  2A53               	goto	l1435
   600  024C                     l1427:	
   601  024C  20CB               	fcall	_alarm_task
   602  024D  2A51               	goto	L2
   603  024E                     l1429:	
   604  024E  201C               	fcall	_av_control_task
   605  024F  2A51               	goto	L2
   606  0250                     l1431:	
   607  0250  214F               	fcall	_set_threshold_task
   608  0251                     L2:	
   609  0251  00CC               	movwf	main@t
   610  0252  2A5E               	goto	l92
   611  0253                     l1435:	
   612  0253  084D               	movf	main@i,w
   613                           
   614                           ; Switch size 1, requested type "speed"
   615                           ; Number of cases is 3, Range of values is 0 to 2
   616                           ; switch strategies available:
   617                           ; Name         Instructions Cycles
   618                           ; direct_byte            9     6 (fixed)
   619                           ; simple_byte           10     6 (average)
   620                           ; jumptable            260     6 (fixed)
   621                           ;	Chosen strategy is direct_byte
   622  0254  0084               	movwf	4
   623  0255  3003               	movlw	3
   624  0256  0204               	subwf	4,w
   625  0257  1803               	skipnc
   626  0258  2A39               	goto	l86
   627  0259  3000               	movlw	high S1485
   628  025A  008A               	movwf	10
   629  025B  3001               	movlw	low S1485
   630  025C  0704               	addwf	4,w
   631  025D  0082               	movwf	2
   632  025E                     l92:	
   633                           
   634                           ;main.c: 210: { T0IE = 0; crtos2TaskTimer[(i)] = t; T0IE = 1; };
   635  025E  128B               	bcf	11,5	;volatile
   636  025F  084D               	movf	main@i,w
   637  0260  3E3B               	addlw	(low (_crtos2TaskTimer| 0))& (0+255)
   638  0261  0084               	movwf	4
   639  0262  084C               	movf	main@t,w
   640  0263  1383               	bcf	3,7	;select IRP bank0
   641  0264  0080               	movwf	0
   642  0265  168B               	bsf	11,5	;volatile
   643  0266  2A39               	goto	l86
   644  0267                     __end_of_main:	
   645                           
   646                           	psect	swtext1
   647  0001                     __pswtext1:	
   648  0001                     S1485:	
   649  0001  2A4C               	ljmp	l1427
   650  0002  2A4E               	ljmp	l1429
   651  0003  2A50               	ljmp	l1431
   652                           
   653                           	psect	opParam
   654  014F                     __popParam:	
   655 ;; *************** function _set_threshold_task *****************
   656 ;; Defined at:
   657 ;;		line 123 in file "opParam.c"
   658 ;; Parameters:    Size  Location     Type
   659 ;;		None
   660 ;; Auto vars:     Size  Location     Type
   661 ;;		None
   662 ;; Return value:  Size  Location     Type
   663 ;;                  1    wreg      unsigned char 
   664 ;; Registers used:
   665 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   666 ;; Tracked objects:
   667 ;;		On entry : 900/0
   668 ;;		On exit  : 100/0
   669 ;;		Unchanged: 0/0
   670 ;; Data sizes:     COMMON   BANK0
   671 ;;      Params:         0       0
   672 ;;      Locals:         0       0
   673 ;;      Temps:          0       0
   674 ;;      Totals:         0       0
   675 ;;Total ram usage:        0 bytes
   676 ;; Hardware stack levels used:    1
   677 ;; Hardware stack levels required when called:    4
   678 ;; This function calls:
   679 ;;		_opSetMainAlarmFromCapture
   680 ;; This function is called by:
   681 ;;		_main
   682 ;; This function uses a non-reentrant model
   683 ;;
   684                           
   685                           
   686                           ;psect for function _set_threshold_task
   687  014F                     _set_threshold_task:	
   688  014F                     l1299:	
   689                           ;incstack = 0
   690                           ; Regs used in _set_threshold_task: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   691                           
   692                           
   693                           ;opParam.c: 125: switch(i)
   694  014F  2953               	goto	l1315
   695  0150                     l1305:	
   696  0150  01B0               	clrf	_i
   697  0151                     l1307:	
   698  0151  3064               	movlw	100
   699  0152  2968               	goto	l227
   700  0153                     l1315:	
   701  0153  0830               	movf	_i,w
   702                           
   703                           ; Switch size 1, requested type "speed"
   704                           ; Number of cases is 2, Range of values is 0 to 1
   705                           ; switch strategies available:
   706                           ; Name         Instructions Cycles
   707                           ; simple_byte            7     4 (average)
   708                           ; direct_byte            8     6 (fixed)
   709                           ; jumptable            260     6 (fixed)
   710                           ;	Chosen strategy is simple_byte
   711  0154  3A00               	xorlw	0	; case 0
   712  0155  1903               	skipnz
   713  0156  295B               	goto	l222
   714  0157  3A01               	xorlw	1	; case 1
   715  0158  1903               	skipnz
   716  0159  2962               	goto	l1325
   717  015A  2950               	goto	l1305
   718  015B                     l222:	
   719                           ;opParam.c: 132: T3L0: if ( (GPIO1)) {return 100;}
   720                           
   721  015B  1C85               	btfss	5,1	;volatile
   722  015C  295E               	goto	u581
   723  015D  295F               	goto	u580
   724  015E                     u581:	
   725  015E  2960               	goto	l1321
   726  015F                     u580:	
   727  015F  2951               	goto	l1307
   728  0160                     l1321:	
   729                           
   730                           ;opParam.c: 133: ++i;
   731  0160  0AB0               	incf	_i,f
   732  0161                     l1323:	
   733                           
   734                           ;opParam.c: 134: opSetMainAlarmFromCapture();
   735  0161  2169               	fcall	_opSetMainAlarmFromCapture
   736  0162                     l1325:	
   737  0162  1283               	bcf	3,5	;RP0=0, select bank0
   738  0163  1885               	btfsc	5,1	;volatile
   739  0164  2966               	goto	u591
   740  0165  2967               	goto	u590
   741  0166                     u591:	
   742  0166  2950               	goto	l1305
   743  0167                     u590:	
   744  0167  2951               	goto	l1307
   745  0168                     l227:	
   746  0168  0008               	return
   747  0169                     __end_of_set_threshold_task:	
   748                           
   749 ;; *************** function _opSetMainAlarmFromCapture *****************
   750 ;; Defined at:
   751 ;;		line 46 in file "opParam.c"
   752 ;; Parameters:    Size  Location     Type
   753 ;;		None
   754 ;; Auto vars:     Size  Location     Type
   755 ;;  x               4   10[BANK0 ] unsigned long 
   756 ;; Return value:  Size  Location     Type
   757 ;;                  1    wreg      void 
   758 ;; Registers used:
   759 ;;		wreg, status,2, status,0, pclath, cstack
   760 ;; Tracked objects:
   761 ;;		On entry : 900/0
   762 ;;		On exit  : 100/100
   763 ;;		Unchanged: 0/0
   764 ;; Data sizes:     COMMON   BANK0
   765 ;;      Params:         0       0
   766 ;;      Locals:         0       4
   767 ;;      Temps:          0       0
   768 ;;      Totals:         0       4
   769 ;;Total ram usage:        4 bytes
   770 ;; Hardware stack levels used:    1
   771 ;; Hardware stack levels required when called:    3
   772 ;; This function calls:
   773 ;;		_opSetMainAlarmByValue
   774 ;; This function is called by:
   775 ;;		_set_threshold_task
   776 ;; This function uses a non-reentrant model
   777 ;;
   778  0169                     _opSetMainAlarmFromCapture:	
   779  0169                     l1169:	
   780                           ;incstack = 0
   781                           ; Regs used in _opSetMainAlarmFromCapture: [wreg+status,2+status,0+pclath+cstack]
   782                           
   783                           
   784                           ;opParam.c: 48: uint32_t x;
   785                           ;opParam.c: 49: GIE = 0;
   786  0169  138B               	bcf	11,7	;volatile
   787  016A                     l1171:	
   788                           
   789                           ;opParam.c: 50: x = pulseInterval.value;
   790  016A  082B               	movf	_pulseInterval+3,w	;volatile
   791  016B  00CB               	movwf	opSetMainAlarmFromCapture@x+3
   792  016C  082A               	movf	_pulseInterval+2,w	;volatile
   793  016D  00CA               	movwf	opSetMainAlarmFromCapture@x+2
   794  016E  0829               	movf	_pulseInterval+1,w	;volatile
   795  016F  00C9               	movwf	opSetMainAlarmFromCapture@x+1
   796  0170  0828               	movf	_pulseInterval,w	;volatile
   797  0171  00C8               	movwf	opSetMainAlarmFromCapture@x
   798  0172                     l1173:	
   799                           
   800                           ;opParam.c: 51: GIE = 1;
   801  0172  178B               	bsf	11,7	;volatile
   802  0173                     l1175:	
   803                           
   804                           ;opParam.c: 52: opSetMainAlarmByValue(x);
   805  0173  084B               	movf	opSetMainAlarmFromCapture@x+3,w
   806  0174  00C7               	movwf	opSetMainAlarmByValue@x+3
   807  0175  084A               	movf	opSetMainAlarmFromCapture@x+2,w
   808  0176  00C6               	movwf	opSetMainAlarmByValue@x+2
   809  0177  0849               	movf	opSetMainAlarmFromCapture@x+1,w
   810  0178  00C5               	movwf	opSetMainAlarmByValue@x+1
   811  0179  0848               	movf	opSetMainAlarmFromCapture@x,w
   812  017A  00C4               	movwf	opSetMainAlarmByValue@x
   813  017B  217D               	fcall	_opSetMainAlarmByValue
   814  017C                     l194:	
   815  017C  0008               	return
   816  017D                     __end_of_opSetMainAlarmFromCapture:	
   817                           
   818 ;; *************** function _opSetMainAlarmByValue *****************
   819 ;; Defined at:
   820 ;;		line 69 in file "opParam.c"
   821 ;; Parameters:    Size  Location     Type
   822 ;;  x               4    6[BANK0 ] unsigned long 
   823 ;; Auto vars:     Size  Location     Type
   824 ;;		None
   825 ;; Return value:  Size  Location     Type
   826 ;;                  1    wreg      void 
   827 ;; Registers used:
   828 ;;		wreg, status,2, status,0, pclath, cstack
   829 ;; Tracked objects:
   830 ;;		On entry : 900/0
   831 ;;		On exit  : 100/100
   832 ;;		Unchanged: 0/0
   833 ;; Data sizes:     COMMON   BANK0
   834 ;;      Params:         0       4
   835 ;;      Locals:         0       0
   836 ;;      Temps:          0       0
   837 ;;      Totals:         0       4
   838 ;;Total ram usage:        4 bytes
   839 ;; Hardware stack levels used:    1
   840 ;; Hardware stack levels required when called:    2
   841 ;; This function calls:
   842 ;;		_DATAEE_WriteByte
   843 ;; This function is called by:
   844 ;;		_opSetMainAlarmFromCapture
   845 ;; This function uses a non-reentrant model
   846 ;;
   847  017D                     _opSetMainAlarmByValue:	
   848  017D                     l1127:	
   849                           ;incstack = 0
   850                           ; Regs used in _opSetMainAlarmByValue: [wreg+status,2+status,0+pclath+cstack]
   851                           
   852                           
   853                           ;opParam.c: 71: mAlarmLevel = x;
   854  017D  0847               	movf	opSetMainAlarmByValue@x+3,w
   855  017E  00A3               	movwf	_mAlarmLevel+3
   856  017F  0846               	movf	opSetMainAlarmByValue@x+2,w
   857  0180  00A2               	movwf	_mAlarmLevel+2
   858  0181  0845               	movf	opSetMainAlarmByValue@x+1,w
   859  0182  00A1               	movwf	_mAlarmLevel+1
   860  0183  0844               	movf	opSetMainAlarmByValue@x,w
   861  0184  00A0               	movwf	_mAlarmLevel
   862  0185                     l1129:	
   863                           
   864                           ;opParam.c: 72: DATAEE_WriteByte(((0)+4)+0, x & 0xFF);
   865  0185  0844               	movf	opSetMainAlarmByValue@x,w
   866  0186  00C2               	movwf	DATAEE_WriteByte@bData
   867  0187  3004               	movlw	4
   868  0188  2267               	fcall	_DATAEE_WriteByte
   869  0189                     l1131:	
   870                           
   871                           ;opParam.c: 73: DATAEE_WriteByte(((0)+4)+1, (x >> 8) & 0xFF);
   872  0189  1283               	bcf	3,5	;RP0=0, select bank0
   873  018A  0845               	movf	opSetMainAlarmByValue@x+1,w
   874  018B  00C2               	movwf	DATAEE_WriteByte@bData
   875  018C  3005               	movlw	5
   876  018D  2267               	fcall	_DATAEE_WriteByte
   877  018E                     l1133:	
   878                           
   879                           ;opParam.c: 74: DATAEE_WriteByte(((0)+4)+2, (x >> 16) & 0xFF);
   880  018E  1283               	bcf	3,5	;RP0=0, select bank0
   881  018F  0846               	movf	opSetMainAlarmByValue@x+2,w
   882  0190  00C2               	movwf	DATAEE_WriteByte@bData
   883  0191  3006               	movlw	6
   884  0192  2267               	fcall	_DATAEE_WriteByte
   885  0193                     l1135:	
   886                           
   887                           ;opParam.c: 75: DATAEE_WriteByte(((0)+4)+3, (x >> 24) & 0xFF);
   888  0193  1283               	bcf	3,5	;RP0=0, select bank0
   889  0194  0847               	movf	opSetMainAlarmByValue@x+3,w
   890  0195  00C2               	movwf	DATAEE_WriteByte@bData
   891  0196  3007               	movlw	7
   892  0197  2267               	fcall	_DATAEE_WriteByte
   893  0198                     l200:	
   894  0198  0008               	return
   895  0199                     __end_of_opSetMainAlarmByValue:	
   896                           
   897 ;; *************** function _opSetMainAlarmFromEE *****************
   898 ;; Defined at:
   899 ;;		line 98 in file "opParam.c"
   900 ;; Parameters:    Size  Location     Type
   901 ;;		None
   902 ;; Auto vars:     Size  Location     Type
   903 ;;  x               4    5[BANK0 ] struct uinteger32
   904 ;; Return value:  Size  Location     Type
   905 ;;                  1    wreg      void 
   906 ;; Registers used:
   907 ;;		wreg, pclath, cstack
   908 ;; Tracked objects:
   909 ;;		On entry : 100/0
   910 ;;		On exit  : 100/0
   911 ;;		Unchanged: 0/0
   912 ;; Data sizes:     COMMON   BANK0
   913 ;;      Params:         0       0
   914 ;;      Locals:         0       4
   915 ;;      Temps:          0       0
   916 ;;      Totals:         0       4
   917 ;;Total ram usage:        4 bytes
   918 ;; Hardware stack levels used:    1
   919 ;; Hardware stack levels required when called:    2
   920 ;; This function calls:
   921 ;;		_DATAEE_ReadByte
   922 ;; This function is called by:
   923 ;;		_main
   924 ;; This function uses a non-reentrant model
   925 ;;
   926  0199                     _opSetMainAlarmFromEE:	
   927  0199                     l1199:	
   928                           ;incstack = 0
   929                           ; Regs used in _opSetMainAlarmFromEE: [wreg+pclath+cstack]
   930                           
   931                           
   932                           ;opParam.c: 100: uinteger32_t x;
   933                           ;opParam.c: 101: x.bytes.C0 = DATAEE_ReadByte(((0)+4)+0);
   934  0199  3004               	movlw	4
   935  019A  2280               	fcall	_DATAEE_ReadByte
   936  019B  1283               	bcf	3,5	;RP0=0, select bank0
   937  019C  00C3               	movwf	opSetMainAlarmFromEE@x
   938                           
   939                           ;opParam.c: 102: x.bytes.C1 = DATAEE_ReadByte(((0)+4)+1);
   940  019D  3005               	movlw	5
   941  019E  2280               	fcall	_DATAEE_ReadByte
   942  019F  1283               	bcf	3,5	;RP0=0, select bank0
   943  01A0  00C4               	movwf	opSetMainAlarmFromEE@x+1
   944                           
   945                           ;opParam.c: 103: x.bytes.C2 = DATAEE_ReadByte(((0)+4)+2);
   946  01A1  3006               	movlw	6
   947  01A2  2280               	fcall	_DATAEE_ReadByte
   948  01A3  1283               	bcf	3,5	;RP0=0, select bank0
   949  01A4  00C5               	movwf	opSetMainAlarmFromEE@x+2
   950                           
   951                           ;opParam.c: 104: x.bytes.C3 = DATAEE_ReadByte(((0)+4)+3);
   952  01A5  3007               	movlw	7
   953  01A6  2280               	fcall	_DATAEE_ReadByte
   954  01A7  1283               	bcf	3,5	;RP0=0, select bank0
   955  01A8  00C6               	movwf	opSetMainAlarmFromEE@x+3
   956  01A9                     l1201:	
   957                           
   958                           ;opParam.c: 105: mAlarmLevel = x.value;
   959  01A9  0846               	movf	opSetMainAlarmFromEE@x+3,w
   960  01AA  00A3               	movwf	_mAlarmLevel+3
   961  01AB  0845               	movf	opSetMainAlarmFromEE@x+2,w
   962  01AC  00A2               	movwf	_mAlarmLevel+2
   963  01AD  0844               	movf	opSetMainAlarmFromEE@x+1,w
   964  01AE  00A1               	movwf	_mAlarmLevel+1
   965  01AF  0843               	movf	opSetMainAlarmFromEE@x,w
   966  01B0  00A0               	movwf	_mAlarmLevel
   967  01B1                     l209:	
   968  01B1  0008               	return
   969  01B2                     __end_of_opSetMainAlarmFromEE:	
   970                           
   971 ;; *************** function _opSetAlarmSamplingFromEE *****************
   972 ;; Defined at:
   973 ;;		line 115 in file "opParam.c"
   974 ;; Parameters:    Size  Location     Type
   975 ;;		None
   976 ;; Auto vars:     Size  Location     Type
   977 ;;		None
   978 ;; Return value:  Size  Location     Type
   979 ;;                  1    wreg      void 
   980 ;; Registers used:
   981 ;;		wreg, pclath, cstack
   982 ;; Tracked objects:
   983 ;;		On entry : 100/0
   984 ;;		On exit  : 100/0
   985 ;;		Unchanged: 0/0
   986 ;; Data sizes:     COMMON   BANK0
   987 ;;      Params:         0       0
   988 ;;      Locals:         0       0
   989 ;;      Temps:          0       0
   990 ;;      Totals:         0       0
   991 ;;Total ram usage:        0 bytes
   992 ;; Hardware stack levels used:    1
   993 ;; Hardware stack levels required when called:    2
   994 ;; This function calls:
   995 ;;		_DATAEE_ReadByte
   996 ;; This function is called by:
   997 ;;		_main
   998 ;; This function uses a non-reentrant model
   999 ;;
  1000  01B2                     _opSetAlarmSamplingFromEE:	
  1001  01B2                     l1205:	
  1002                           ;incstack = 0
  1003                           ; Regs used in _opSetAlarmSamplingFromEE: [wreg+pclath+cstack]
  1004                           
  1005                           
  1006                           ;opParam.c: 117: sampleInterval = DATAEE_ReadByte((((0)+4)+4));
  1007  01B2  3008               	movlw	8
  1008  01B3  2280               	fcall	_DATAEE_ReadByte
  1009  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  1010  01B5  00CE               	movwf	_sampleInterval
  1011  01B6                     l215:	
  1012  01B6  0008               	return
  1013  01B7                     __end_of_opSetAlarmSamplingFromEE:	
  1014                           
  1015                           	psect	text4
  1016  0267                     __ptext4:	
  1017 ;; *************** function _DATAEE_WriteByte *****************
  1018 ;; Defined at:
  1019 ;;		line 21 in file "EE12F675.c"
  1020 ;; Parameters:    Size  Location     Type
  1021 ;;  bAdd            1    wreg     unsigned char 
  1022 ;;  bData           1    4[BANK0 ] unsigned char 
  1023 ;; Auto vars:     Size  Location     Type
  1024 ;;  bAdd            1    5[BANK0 ] unsigned char 
  1025 ;; Return value:  Size  Location     Type
  1026 ;;                  1    wreg      void 
  1027 ;; Registers used:
  1028 ;;		wreg
  1029 ;; Tracked objects:
  1030 ;;		On entry : 100/0
  1031 ;;		On exit  : 100/100
  1032 ;;		Unchanged: 0/0
  1033 ;; Data sizes:     COMMON   BANK0
  1034 ;;      Params:         0       1
  1035 ;;      Locals:         0       1
  1036 ;;      Temps:          0       0
  1037 ;;      Totals:         0       2
  1038 ;;Total ram usage:        2 bytes
  1039 ;; Hardware stack levels used:    1
  1040 ;; Hardware stack levels required when called:    1
  1041 ;; This function calls:
  1042 ;;		Nothing
  1043 ;; This function is called by:
  1044 ;;		_opSetMainAlarmByValue
  1045 ;; This function uses a non-reentrant model
  1046 ;;
  1047                           
  1048                           
  1049                           ;psect for function _DATAEE_WriteByte
  1050  0267                     _DATAEE_WriteByte:	
  1051                           
  1052                           ;incstack = 0
  1053                           ; Regs used in _DATAEE_WriteByte: [wreg]
  1054                           ;DATAEE_WriteByte@bAdd stored from wreg
  1055  0267  00C3               	movwf	DATAEE_WriteByte@bAdd
  1056                           
  1057                           ;EE12F675.c: 23: { EEADR = bAdd; EEDATA = bData; { EECON1bits.WREN = 1; INTCONbits.GIE =
      +                           0; { EECON2 = 0x55; EECON2 = 0xAA; EECON1bits.WR = 1; }; EECON1bits.WREN = 0; INTCONbit
      +                          s.GIE = 1; }; };
  1058  0268  1683               	bsf	3,5	;RP0=1, select bank1
  1059  0269  009B               	movwf	27	;volatile
  1060  026A  1283               	bcf	3,5	;RP0=0, select bank0
  1061  026B  0842               	movf	DATAEE_WriteByte@bData,w
  1062  026C  1683               	bsf	3,5	;RP0=1, select bank1
  1063  026D  009A               	movwf	26	;volatile
  1064  026E  151C               	bsf	28,2	;volsfr
  1065  026F  138B               	bcf	11,7	;volatile
  1066  0270  3055               	movlw	85
  1067  0271  009D               	movwf	29	;volsfr
  1068  0272  30AA               	movlw	170
  1069  0273  009D               	movwf	29	;volsfr
  1070  0274  149C               	bsf	28,1	;volsfr
  1071  0275  111C               	bcf	28,2	;volsfr
  1072  0276  178B               	bsf	11,7	;volatile
  1073  0277  0008               	return
  1074  0278                     __end_of_DATAEE_WriteByte:	
  1075                           
  1076                           	psect	text7
  1077  0280                     __ptext7:	
  1078 ;; *************** function _DATAEE_ReadByte *****************
  1079 ;; Defined at:
  1080 ;;		line 27 in file "EE12F675.c"
  1081 ;; Parameters:    Size  Location     Type
  1082 ;;  bAdd            1    wreg     unsigned char 
  1083 ;; Auto vars:     Size  Location     Type
  1084 ;;  bAdd            1    4[BANK0 ] unsigned char 
  1085 ;; Return value:  Size  Location     Type
  1086 ;;                  1    wreg      unsigned char 
  1087 ;; Registers used:
  1088 ;;		wreg
  1089 ;; Tracked objects:
  1090 ;;		On entry : 100/0
  1091 ;;		On exit  : 100/100
  1092 ;;		Unchanged: 0/0
  1093 ;; Data sizes:     COMMON   BANK0
  1094 ;;      Params:         0       0
  1095 ;;      Locals:         0       1
  1096 ;;      Temps:          0       0
  1097 ;;      Totals:         0       1
  1098 ;;Total ram usage:        1 bytes
  1099 ;; Hardware stack levels used:    1
  1100 ;; Hardware stack levels required when called:    1
  1101 ;; This function calls:
  1102 ;;		Nothing
  1103 ;; This function is called by:
  1104 ;;		_opSetMainAlarmFromEE
  1105 ;;		_opSetAlarmSamplingFromEE
  1106 ;; This function uses a non-reentrant model
  1107 ;;
  1108                           
  1109                           
  1110                           ;psect for function _DATAEE_ReadByte
  1111  0280                     _DATAEE_ReadByte:	
  1112                           
  1113                           ;incstack = 0
  1114                           ; Regs used in _DATAEE_ReadByte: [wreg]
  1115                           ;DATAEE_ReadByte@bAdd stored from wreg
  1116  0280  00C2               	movwf	DATAEE_ReadByte@bAdd
  1117                           
  1118                           ;EE12F675.c: 29: EEADR = bAdd;
  1119  0281  1683               	bsf	3,5	;RP0=1, select bank1
  1120  0282  009B               	movwf	27	;volatile
  1121                           
  1122                           ;EE12F675.c: 30: EECON1bits.RD = 1;
  1123  0283  141C               	bsf	28,0	;volsfr
  1124                           
  1125                           ;EE12F675.c: 31: return (EEDATA);
  1126  0284  081A               	movf	26,w	;volatile
  1127  0285  0008               	return
  1128  0286                     __end_of_DATAEE_ReadByte:	
  1129                           
  1130                           	psect	audVis
  1131  0017                     __paudVis:	
  1132 ;; *************** function _av_control_task_init *****************
  1133 ;; Defined at:
  1134 ;;		line 59 in file "audioVisual.c"
  1135 ;; Parameters:    Size  Location     Type
  1136 ;;		None
  1137 ;; Auto vars:     Size  Location     Type
  1138 ;;		None
  1139 ;; Return value:  Size  Location     Type
  1140 ;;                  1    wreg      void 
  1141 ;; Registers used:
  1142 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1143 ;; Tracked objects:
  1144 ;;		On entry : 100/0
  1145 ;;		On exit  : 100/0
  1146 ;;		Unchanged: 0/0
  1147 ;; Data sizes:     COMMON   BANK0
  1148 ;;      Params:         0       0
  1149 ;;      Locals:         0       0
  1150 ;;      Temps:          0       0
  1151 ;;      Totals:         0       0
  1152 ;;Total ram usage:        0 bytes
  1153 ;; Hardware stack levels used:    1
  1154 ;; Hardware stack levels required when called:    2
  1155 ;; This function calls:
  1156 ;;		_avControl
  1157 ;; This function is called by:
  1158 ;;		_main
  1159 ;; This function uses a non-reentrant model
  1160 ;;
  1161                           
  1162                           
  1163                           ;psect for function _av_control_task_init
  1164  0017                     _av_control_task_init:	
  1165  0017                     l1185:	
  1166                           ;incstack = 0
  1167                           ; Regs used in _av_control_task_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1168                           
  1169                           
  1170                           ;audioVisual.c: 64: avControl((0) , (2));
  1171  0017  3002               	movlw	2
  1172  0018  00C2               	movwf	avControl@mode
  1173  0019  3000               	movlw	0
  1174  001A  207A               	fcall	_avControl
  1175  001B                     l149:	
  1176  001B  0008               	return
  1177  001C                     __end_of_av_control_task_init:	
  1178                           
  1179 ;; *************** function _av_control_task *****************
  1180 ;; Defined at:
  1181 ;;		line 71 in file "audioVisual.c"
  1182 ;; Parameters:    Size  Location     Type
  1183 ;;		None
  1184 ;; Auto vars:     Size  Location     Type
  1185 ;;		None
  1186 ;; Return value:  Size  Location     Type
  1187 ;;                  1    wreg      unsigned char 
  1188 ;; Registers used:
  1189 ;;		wreg, status,2, status,0
  1190 ;; Tracked objects:
  1191 ;;		On entry : 900/0
  1192 ;;		On exit  : 900/0
  1193 ;;		Unchanged: 800/0
  1194 ;; Data sizes:     COMMON   BANK0
  1195 ;;      Params:         0       0
  1196 ;;      Locals:         0       0
  1197 ;;      Temps:          0       0
  1198 ;;      Totals:         0       0
  1199 ;;Total ram usage:        0 bytes
  1200 ;; Hardware stack levels used:    1
  1201 ;; Hardware stack levels required when called:    1
  1202 ;; This function calls:
  1203 ;;		Nothing
  1204 ;; This function is called by:
  1205 ;;		_main
  1206 ;; This function uses a non-reentrant model
  1207 ;;
  1208  001C                     _av_control_task:	
  1209  001C                     l1243:	
  1210                           ;incstack = 0
  1211                           ; Regs used in _av_control_task: [wreg+status,2+status,0]
  1212                           
  1213                           
  1214                           ;audioVisual.c: 76: ++avc[0].count;
  1215  001C  0AB5               	incf	_avc+2,f
  1216  001D                     l1245:	
  1217                           
  1218                           ;audioVisual.c: 77: if (!avc[0].onOff)
  1219  001D  0836               	movf	_avc+3,w
  1220  001E  1D03               	btfss	3,2
  1221  001F  2821               	goto	u441
  1222  0020  2822               	goto	u440
  1223  0021                     u441:	
  1224  0021  2837               	goto	l1259
  1225  0022                     u440:	
  1226  0022                     l1247:	
  1227                           
  1228                           ;audioVisual.c: 78: {
  1229                           ;audioVisual.c: 79: if (avc[0].t0 && (!avc[0].t1 || (avc[0].count > avc[0].t1)))
  1230  0022  0833               	movf	_avc,w
  1231  0023  1903               	btfsc	3,2
  1232  0024  2826               	goto	u451
  1233  0025  2827               	goto	u450
  1234  0026                     u451:	
  1235  0026  284A               	goto	l1269
  1236  0027                     u450:	
  1237  0027                     l1249:	
  1238  0027  0834               	movf	_avc+1,w
  1239  0028  1903               	btfsc	3,2
  1240  0029  282B               	goto	u461
  1241  002A  282C               	goto	u460
  1242  002B                     u461:	
  1243  002B  2832               	goto	l1253
  1244  002C                     u460:	
  1245  002C                     l1251:	
  1246  002C  0835               	movf	_avc+2,w
  1247  002D  0234               	subwf	_avc+1,w
  1248  002E  1803               	skipnc
  1249  002F  2831               	goto	u471
  1250  0030  2832               	goto	u470
  1251  0031                     u471:	
  1252  0031  284A               	goto	l1269
  1253  0032                     u470:	
  1254  0032                     l1253:	
  1255                           
  1256                           ;audioVisual.c: 80: {
  1257                           ;audioVisual.c: 81: avc[0].count = 0;
  1258  0032  01B5               	clrf	_avc+2
  1259  0033                     l1255:	
  1260                           
  1261                           ;audioVisual.c: 82: avc[0].onOff = 1;
  1262  0033  01B6               	clrf	_avc+3
  1263  0034  0AB6               	incf	_avc+3,f
  1264  0035                     l1257:	
  1265                           
  1266                           ;audioVisual.c: 83: (GPIO2) = 1;
  1267  0035  1505               	bsf	5,2	;volatile
  1268  0036  284A               	goto	l1269
  1269  0037                     l1259:	
  1270                           
  1271                           ;audioVisual.c: 86: else
  1272                           ;audioVisual.c: 87: {
  1273                           ;audioVisual.c: 88: if (avc[0].t1 && (!avc[0].t0 || (avc[0].count > avc[0].t0)))
  1274  0037  0834               	movf	_avc+1,w
  1275  0038  1903               	btfsc	3,2
  1276  0039  283B               	goto	u481
  1277  003A  283C               	goto	u480
  1278  003B                     u481:	
  1279  003B  284A               	goto	l1269
  1280  003C                     u480:	
  1281  003C                     l1261:	
  1282  003C  0833               	movf	_avc,w
  1283  003D  1903               	btfsc	3,2
  1284  003E  2840               	goto	u491
  1285  003F  2841               	goto	u490
  1286  0040                     u491:	
  1287  0040  2847               	goto	l1265
  1288  0041                     u490:	
  1289  0041                     l1263:	
  1290  0041  0835               	movf	_avc+2,w
  1291  0042  0233               	subwf	_avc,w
  1292  0043  1803               	skipnc
  1293  0044  2846               	goto	u501
  1294  0045  2847               	goto	u500
  1295  0046                     u501:	
  1296  0046  284A               	goto	l1269
  1297  0047                     u500:	
  1298  0047                     l1265:	
  1299                           
  1300                           ;audioVisual.c: 89: {
  1301                           ;audioVisual.c: 90: avc[0].count = 0;
  1302  0047  01B5               	clrf	_avc+2
  1303                           
  1304                           ;audioVisual.c: 91: avc[0].onOff = 0;
  1305  0048  01B6               	clrf	_avc+3
  1306  0049                     l1267:	
  1307                           
  1308                           ;audioVisual.c: 92: (GPIO2) = 0;
  1309  0049  1105               	bcf	5,2	;volatile
  1310  004A                     l1269:	
  1311                           
  1312                           ;audioVisual.c: 93: }
  1313                           ;audioVisual.c: 94: }
  1314                           ;audioVisual.c: 99: ++avc[1].count;
  1315  004A  0AB9               	incf	_avc+6,f
  1316  004B                     l1271:	
  1317                           
  1318                           ;audioVisual.c: 100: if (!avc[1].onOff)
  1319  004B  083A               	movf	_avc+7,w
  1320  004C  1D03               	btfss	3,2
  1321  004D  284F               	goto	u511
  1322  004E  2850               	goto	u510
  1323  004F                     u511:	
  1324  004F  2865               	goto	l1285
  1325  0050                     u510:	
  1326  0050                     l1273:	
  1327                           
  1328                           ;audioVisual.c: 101: {
  1329                           ;audioVisual.c: 102: if (avc[1].t0 && (!avc[1].t1 || (avc[1].count > avc[1].t1)))
  1330  0050  0837               	movf	_avc+4,w
  1331  0051  1903               	btfsc	3,2
  1332  0052  2854               	goto	u521
  1333  0053  2855               	goto	u520
  1334  0054                     u521:	
  1335  0054  2878               	goto	l1295
  1336  0055                     u520:	
  1337  0055                     l1275:	
  1338  0055  0838               	movf	_avc+5,w
  1339  0056  1903               	btfsc	3,2
  1340  0057  2859               	goto	u531
  1341  0058  285A               	goto	u530
  1342  0059                     u531:	
  1343  0059  2860               	goto	l1279
  1344  005A                     u530:	
  1345  005A                     l1277:	
  1346  005A  0839               	movf	_avc+6,w
  1347  005B  0238               	subwf	_avc+5,w
  1348  005C  1803               	skipnc
  1349  005D  285F               	goto	u541
  1350  005E  2860               	goto	u540
  1351  005F                     u541:	
  1352  005F  2878               	goto	l1295
  1353  0060                     u540:	
  1354  0060                     l1279:	
  1355                           
  1356                           ;audioVisual.c: 103: {
  1357                           ;audioVisual.c: 104: avc[1].count = 0;
  1358  0060  01B9               	clrf	_avc+6
  1359  0061                     l1281:	
  1360                           
  1361                           ;audioVisual.c: 105: avc[1].onOff = 1;
  1362  0061  01BA               	clrf	_avc+7
  1363  0062  0ABA               	incf	_avc+7,f
  1364  0063                     l1283:	
  1365                           
  1366                           ;audioVisual.c: 106: (GPIO4) = 1;
  1367  0063  1605               	bsf	5,4	;volatile
  1368  0064  2878               	goto	l1295
  1369  0065                     l1285:	
  1370                           
  1371                           ;audioVisual.c: 109: else
  1372                           ;audioVisual.c: 110: {
  1373                           ;audioVisual.c: 111: if (avc[1].t1 && (!avc[1].t0 || (avc[1].count > avc[1].t0)))
  1374  0065  0838               	movf	_avc+5,w
  1375  0066  1903               	btfsc	3,2
  1376  0067  2869               	goto	u551
  1377  0068  286A               	goto	u550
  1378  0069                     u551:	
  1379  0069  2878               	goto	l1295
  1380  006A                     u550:	
  1381  006A                     l1287:	
  1382  006A  0837               	movf	_avc+4,w
  1383  006B  1903               	btfsc	3,2
  1384  006C  286E               	goto	u561
  1385  006D  286F               	goto	u560
  1386  006E                     u561:	
  1387  006E  2875               	goto	l1291
  1388  006F                     u560:	
  1389  006F                     l1289:	
  1390  006F  0839               	movf	_avc+6,w
  1391  0070  0237               	subwf	_avc+4,w
  1392  0071  1803               	skipnc
  1393  0072  2874               	goto	u571
  1394  0073  2875               	goto	u570
  1395  0074                     u571:	
  1396  0074  2878               	goto	l1295
  1397  0075                     u570:	
  1398  0075                     l1291:	
  1399                           
  1400                           ;audioVisual.c: 112: {
  1401                           ;audioVisual.c: 113: avc[1].count = 0;
  1402  0075  01B9               	clrf	_avc+6
  1403                           
  1404                           ;audioVisual.c: 114: avc[1].onOff = 0;
  1405  0076  01BA               	clrf	_avc+7
  1406  0077                     l1293:	
  1407                           
  1408                           ;audioVisual.c: 115: (GPIO4) = 0;
  1409  0077  1205               	bcf	5,4	;volatile
  1410  0078                     l1295:	
  1411                           
  1412                           ;audioVisual.c: 116: }
  1413                           ;audioVisual.c: 117: }
  1414                           ;audioVisual.c: 122: return 25;
  1415  0078  3019               	movlw	25
  1416  0079                     l168:	
  1417  0079  0008               	return
  1418  007A                     __end_of_av_control_task:	
  1419                           
  1420 ;; *************** function _avControl *****************
  1421 ;; Defined at:
  1422 ;;		line 26 in file "audioVisual.c"
  1423 ;; Parameters:    Size  Location     Type
  1424 ;;  item            1    wreg     unsigned char 
  1425 ;;  mode            1    4[BANK0 ] unsigned char 
  1426 ;; Auto vars:     Size  Location     Type
  1427 ;;  item            1    6[BANK0 ] unsigned char 
  1428 ;;  c               1    7[BANK0 ] PTR struct avControlStru
  1429 ;;		 -> avc(8), 
  1430 ;; Return value:  Size  Location     Type
  1431 ;;                  1    wreg      unsigned char 
  1432 ;; Registers used:
  1433 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1434 ;; Tracked objects:
  1435 ;;		On entry : 100/0
  1436 ;;		On exit  : 100/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMMON   BANK0
  1439 ;;      Params:         0       1
  1440 ;;      Locals:         0       2
  1441 ;;      Temps:          0       1
  1442 ;;      Totals:         0       4
  1443 ;;Total ram usage:        4 bytes
  1444 ;; Hardware stack levels used:    1
  1445 ;; Hardware stack levels required when called:    1
  1446 ;; This function calls:
  1447 ;;		Nothing
  1448 ;; This function is called by:
  1449 ;;		_alarm_init
  1450 ;;		_alarm_task
  1451 ;;		_av_control_task_init
  1452 ;; This function uses a non-reentrant model
  1453 ;;
  1454  007A                     _avControl:	
  1455                           
  1456                           ;incstack = 0
  1457                           ; Regs used in _avControl: [wreg-fsr0h+status,2+status,0]
  1458                           ;avControl@item stored from wreg
  1459  007A  00C4               	movwf	avControl@item
  1460  007B                     l1139:	
  1461                           
  1462                           ;audioVisual.c: 28: if (item >= (2)) {return 0;}
  1463  007B  3002               	movlw	2
  1464  007C  0244               	subwf	avControl@item,w
  1465  007D  1C03               	skipc
  1466  007E  2880               	goto	u371
  1467  007F  2881               	goto	u370
  1468  0080                     u371:	
  1469  0080  2882               	goto	l1143
  1470  0081                     u370:	
  1471  0081  28CA               	goto	l138
  1472  0082                     l1143:	
  1473                           
  1474                           ;audioVisual.c: 29: avControlStruct_t *c = &avc[item];
  1475  0082  0844               	movf	avControl@item,w
  1476  0083  00C3               	movwf	??_avControl
  1477  0084  3001               	movlw	1
  1478  0085                     u385:	
  1479  0085  1003               	clrc
  1480  0086  0DC3               	rlf	??_avControl,f
  1481  0087  3EFF               	addlw	-1
  1482  0088  1D03               	skipz
  1483  0089  2885               	goto	u385
  1484  008A  1003               	clrc
  1485  008B  0D43               	rlf	??_avControl,w
  1486  008C  3E33               	addlw	(low (_avc| 0))& (0+255)
  1487  008D  00C5               	movwf	avControl@c
  1488                           
  1489                           ;audioVisual.c: 30: switch(mode)
  1490  008E  28BF               	goto	l1163
  1491  008F                     l1145:	
  1492                           
  1493                           ;audioVisual.c: 33: c->t0 = 0;
  1494  008F  0845               	movf	avControl@c,w
  1495  0090  0084               	movwf	4
  1496  0091  1383               	bcf	3,7	;select IRP bank0
  1497  0092  0180               	clrf	0
  1498  0093                     l1147:	
  1499                           
  1500                           ;audioVisual.c: 34: c->t1 = 1;
  1501  0093  0A45               	incf	avControl@c,w
  1502  0094  0084               	movwf	4
  1503  0095  0180               	clrf	0
  1504  0096  0A80               	incf	0,f
  1505                           
  1506                           ;audioVisual.c: 35: break;
  1507  0097  28CA               	goto	l138
  1508  0098                     l1149:	
  1509                           
  1510                           ;audioVisual.c: 37: c->t0 = (uint8_t)( 0.25 * (4));
  1511  0098  0845               	movf	avControl@c,w
  1512  0099  0084               	movwf	4
  1513  009A  1383               	bcf	3,7	;select IRP bank0
  1514  009B  0180               	clrf	0
  1515  009C  0A80               	incf	0,f
  1516                           
  1517                           ;audioVisual.c: 38: c->t1 = (uint8_t)(19.75 * (4));
  1518  009D  0A45               	incf	avControl@c,w
  1519  009E  0084               	movwf	4
  1520  009F  304F               	movlw	79
  1521  00A0  0080               	movwf	0
  1522                           
  1523                           ;audioVisual.c: 39: break;
  1524  00A1  28CA               	goto	l138
  1525  00A2                     l1151:	
  1526                           
  1527                           ;audioVisual.c: 41: c->t0 = (uint8_t)(5 * (4));
  1528  00A2  0845               	movf	avControl@c,w
  1529  00A3  0084               	movwf	4
  1530  00A4  3014               	movlw	20
  1531  00A5  1383               	bcf	3,7	;select IRP bank0
  1532  00A6  0080               	movwf	0
  1533                           
  1534                           ;audioVisual.c: 42: c->t1 = (uint8_t)(5 * (4));
  1535  00A7  0A45               	incf	avControl@c,w
  1536  00A8  0084               	movwf	4
  1537  00A9  3014               	movlw	20
  1538  00AA  0080               	movwf	0
  1539                           
  1540                           ;audioVisual.c: 43: break;
  1541  00AB  28CA               	goto	l138
  1542  00AC                     l1153:	
  1543                           
  1544                           ;audioVisual.c: 45: c->t0 = (uint8_t)(2.5 * (4));
  1545  00AC  0845               	movf	avControl@c,w
  1546  00AD  0084               	movwf	4
  1547  00AE  300A               	movlw	10
  1548  00AF  1383               	bcf	3,7	;select IRP bank0
  1549  00B0  0080               	movwf	0
  1550                           
  1551                           ;audioVisual.c: 46: c->t1 = (uint8_t)(2.5 * (4));
  1552  00B1  0A45               	incf	avControl@c,w
  1553  00B2  0084               	movwf	4
  1554  00B3  300A               	movlw	10
  1555  00B4  0080               	movwf	0
  1556                           
  1557                           ;audioVisual.c: 47: break;
  1558  00B5  28CA               	goto	l138
  1559  00B6                     l1155:	
  1560                           
  1561                           ;audioVisual.c: 49: c->t0 = 1;
  1562  00B6  0845               	movf	avControl@c,w
  1563  00B7  0084               	movwf	4
  1564  00B8  1383               	bcf	3,7	;select IRP bank0
  1565  00B9  0180               	clrf	0
  1566  00BA  0A80               	incf	0,f
  1567  00BB                     l1157:	
  1568                           
  1569                           ;audioVisual.c: 50: c->t1 = 0;
  1570  00BB  0A45               	incf	avControl@c,w
  1571  00BC  0084               	movwf	4
  1572  00BD  0180               	clrf	0
  1573                           
  1574                           ;audioVisual.c: 51: break;
  1575  00BE  28CA               	goto	l138
  1576  00BF                     l1163:	
  1577  00BF  0842               	movf	avControl@mode,w
  1578                           
  1579                           ; Switch size 1, requested type "speed"
  1580                           ; Number of cases is 5, Range of values is 0 to 4
  1581                           ; switch strategies available:
  1582                           ; Name         Instructions Cycles
  1583                           ; direct_byte           11     6 (fixed)
  1584                           ; simple_byte           16     9 (average)
  1585                           ; jumptable            260     6 (fixed)
  1586                           ;	Chosen strategy is direct_byte
  1587  00C0  0084               	movwf	4
  1588  00C1  3005               	movlw	5
  1589  00C2  0204               	subwf	4,w
  1590  00C3  1803               	skipnc
  1591  00C4  28CA               	goto	l138
  1592  00C5  3002               	movlw	high S1487
  1593  00C6  008A               	movwf	10
  1594  00C7  3086               	movlw	low S1487
  1595  00C8  0704               	addwf	4,w
  1596  00C9  0082               	movwf	2
  1597  00CA                     l138:	
  1598  00CA  0008               	return
  1599  00CB                     __end_of_avControl:	
  1600                           
  1601                           	psect	alarm
  1602  00CB                     __palarm:	
  1603 ;; *************** function _alarm_task *****************
  1604 ;; Defined at:
  1605 ;;		line 32 in file "alarm.c"
  1606 ;; Parameters:    Size  Location     Type
  1607 ;;		None
  1608 ;; Auto vars:     Size  Location     Type
  1609 ;;  x               4    8[BANK0 ] unsigned long 
  1610 ;; Return value:  Size  Location     Type
  1611 ;;                  1    wreg      unsigned char 
  1612 ;; Registers used:
  1613 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1614 ;; Tracked objects:
  1615 ;;		On entry : 900/0
  1616 ;;		On exit  : 100/0
  1617 ;;		Unchanged: 0/0
  1618 ;; Data sizes:     COMMON   BANK0
  1619 ;;      Params:         0       0
  1620 ;;      Locals:         0       4
  1621 ;;      Temps:          0       0
  1622 ;;      Totals:         0       4
  1623 ;;Total ram usage:        4 bytes
  1624 ;; Hardware stack levels used:    1
  1625 ;; Hardware stack levels required when called:    2
  1626 ;; This function calls:
  1627 ;;		_avControl
  1628 ;; This function is called by:
  1629 ;;		_main
  1630 ;; This function uses a non-reentrant model
  1631 ;;
  1632                           
  1633                           
  1634                           ;psect for function _alarm_task
  1635  00CB                     _alarm_task:	
  1636  00CB                     l1209:	
  1637                           ;incstack = 0
  1638                           ; Regs used in _alarm_task: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1639                           
  1640                           
  1641                           ;alarm.c: 34: if(++samplingCount < sampleInterval) {return 10;}
  1642  00CB  084E               	movf	_sampleInterval,w
  1643  00CC  0AB1               	incf	_samplingCount,f
  1644  00CD  0231               	subwf	_samplingCount,w
  1645  00CE  1803               	skipnc
  1646  00CF  28D1               	goto	u391
  1647  00D0  28D2               	goto	u390
  1648  00D1                     u391:	
  1649  00D1  28D4               	goto	l1215
  1650  00D2                     u390:	
  1651  00D2                     l1211:	
  1652  00D2  300A               	movlw	10
  1653  00D3  2939               	goto	l120
  1654  00D4                     l1215:	
  1655                           
  1656                           ;alarm.c: 35: samplingCount = 0;
  1657  00D4  01B1               	clrf	_samplingCount
  1658  00D5                     l1217:	
  1659                           
  1660                           ;alarm.c: 36: uint32_t x;
  1661                           ;alarm.c: 38: GIE=0;
  1662  00D5  138B               	bcf	11,7	;volatile
  1663  00D6                     l1219:	
  1664                           
  1665                           ;alarm.c: 39: x = pulseInterval.value;
  1666  00D6  082B               	movf	_pulseInterval+3,w	;volatile
  1667  00D7  00C9               	movwf	alarm_task@x+3
  1668  00D8  082A               	movf	_pulseInterval+2,w	;volatile
  1669  00D9  00C8               	movwf	alarm_task@x+2
  1670  00DA  0829               	movf	_pulseInterval+1,w	;volatile
  1671  00DB  00C7               	movwf	alarm_task@x+1
  1672  00DC  0828               	movf	_pulseInterval,w	;volatile
  1673  00DD  00C6               	movwf	alarm_task@x
  1674  00DE                     l1221:	
  1675                           
  1676                           ;alarm.c: 40: GIE=1;
  1677  00DE  178B               	bsf	11,7	;volatile
  1678  00DF                     l1223:	
  1679                           
  1680                           ;alarm.c: 42: if (x < mAlarmLevel)
  1681  00DF  0823               	movf	_mAlarmLevel+3,w
  1682  00E0  0249               	subwf	alarm_task@x+3,w
  1683  00E1  1D03               	skipz
  1684  00E2  28ED               	goto	u405
  1685  00E3  0822               	movf	_mAlarmLevel+2,w
  1686  00E4  0248               	subwf	alarm_task@x+2,w
  1687  00E5  1D03               	skipz
  1688  00E6  28ED               	goto	u405
  1689  00E7  0821               	movf	_mAlarmLevel+1,w
  1690  00E8  0247               	subwf	alarm_task@x+1,w
  1691  00E9  1D03               	skipz
  1692  00EA  28ED               	goto	u405
  1693  00EB  0820               	movf	_mAlarmLevel,w
  1694  00EC  0246               	subwf	alarm_task@x,w
  1695  00ED                     u405:	
  1696  00ED  1803               	skipnc
  1697  00EE  28F0               	goto	u401
  1698  00EF  28F1               	goto	u400
  1699  00F0                     u401:	
  1700  00F0  28FA               	goto	l1227
  1701  00F1                     u400:	
  1702  00F1                     l1225:	
  1703                           
  1704                           ;alarm.c: 43: {
  1705                           ;alarm.c: 44: avControl((0), (4));
  1706  00F1  3004               	movlw	4
  1707  00F2  00C2               	movwf	avControl@mode
  1708  00F3  3000               	movlw	0
  1709  00F4  207A               	fcall	_avControl
  1710                           
  1711                           ;alarm.c: 45: avControl( (1) , (4));
  1712  00F5  3004               	movlw	4
  1713  00F6  00C2               	movwf	avControl@mode
  1714  00F7  3001               	movlw	1
  1715  00F8  207A               	fcall	_avControl
  1716                           
  1717                           ;alarm.c: 46: }
  1718  00F9  28D2               	goto	l1211
  1719  00FA                     l1227:	
  1720                           
  1721                           ;alarm.c: 47: else if (x < pAlarmLevel)
  1722  00FA  0827               	movf	_pAlarmLevel+3,w
  1723  00FB  0249               	subwf	alarm_task@x+3,w
  1724  00FC  1D03               	skipz
  1725  00FD  2908               	goto	u415
  1726  00FE  0826               	movf	_pAlarmLevel+2,w
  1727  00FF  0248               	subwf	alarm_task@x+2,w
  1728  0100  1D03               	skipz
  1729  0101  2908               	goto	u415
  1730  0102  0825               	movf	_pAlarmLevel+1,w
  1731  0103  0247               	subwf	alarm_task@x+1,w
  1732  0104  1D03               	skipz
  1733  0105  2908               	goto	u415
  1734  0106  0824               	movf	_pAlarmLevel,w
  1735  0107  0246               	subwf	alarm_task@x,w
  1736  0108                     u415:	
  1737  0108  1803               	skipnc
  1738  0109  290B               	goto	u411
  1739  010A  290C               	goto	u410
  1740  010B                     u411:	
  1741  010B  2915               	goto	l1231
  1742  010C                     u410:	
  1743  010C                     l1229:	
  1744                           
  1745                           ;alarm.c: 48: {
  1746                           ;alarm.c: 49: avControl((0), (2));
  1747  010C  3002               	movlw	2
  1748  010D  00C2               	movwf	avControl@mode
  1749  010E  3000               	movlw	0
  1750  010F  207A               	fcall	_avControl
  1751                           
  1752                           ;alarm.c: 50: avControl( (1) , (3));
  1753  0110  3003               	movlw	3
  1754  0111  00C2               	movwf	avControl@mode
  1755  0112  3001               	movlw	1
  1756  0113  207A               	fcall	_avControl
  1757                           
  1758                           ;alarm.c: 51: }
  1759  0114  28D2               	goto	l1211
  1760  0115                     l1231:	
  1761                           
  1762                           ;alarm.c: 52: else
  1763                           ;alarm.c: 53: {
  1764                           ;alarm.c: 54: if (tmr1Overflowed32 || (x > 2000000))
  1765  0115  0832               	movf	_tmr1Overflowed32,w	;volatile
  1766  0116  1D03               	btfss	3,2
  1767  0117  2919               	goto	u421
  1768  0118  291A               	goto	u420
  1769  0119                     u421:	
  1770  0119  292D               	goto	l1235
  1771  011A                     u420:	
  1772  011A                     l1233:	
  1773  011A  0849               	movf	alarm_task@x+3,w
  1774  011B  1D03               	btfss	3,2
  1775  011C  292D               	goto	u430
  1776  011D  301E               	movlw	30
  1777  011E  0248               	subwf	alarm_task@x+2,w
  1778  011F  1D03               	skipz
  1779  0120  2929               	goto	u433
  1780  0121  3084               	movlw	132
  1781  0122  0247               	subwf	alarm_task@x+1,w
  1782  0123  1D03               	skipz
  1783  0124  2929               	goto	u433
  1784  0125  3081               	movlw	129
  1785  0126  0246               	subwf	alarm_task@x,w
  1786  0127  1D03               	skipz
  1787  0128  2929               	goto	u433
  1788  0129                     u433:	
  1789  0129  1C03               	btfss	3,0
  1790  012A  292C               	goto	u431
  1791  012B  292D               	goto	u430
  1792  012C                     u431:	
  1793  012C  2931               	goto	l1237
  1794  012D                     u430:	
  1795  012D                     l1235:	
  1796                           
  1797                           ;alarm.c: 55: {avControl((0), (0));}
  1798  012D  01C2               	clrf	avControl@mode
  1799  012E  3000               	movlw	0
  1800  012F  207A               	fcall	_avControl
  1801  0130  2935               	goto	l128
  1802  0131                     l1237:	
  1803                           
  1804                           ;alarm.c: 56: else
  1805                           ;alarm.c: 57: {avControl((0), (1));}
  1806  0131  01C2               	clrf	avControl@mode
  1807  0132  0AC2               	incf	avControl@mode,f
  1808  0133  3000               	movlw	0
  1809  0134  207A               	fcall	_avControl
  1810  0135                     l128:	
  1811                           
  1812                           ;alarm.c: 58: avControl( (1) , (0));
  1813  0135  01C2               	clrf	avControl@mode
  1814  0136  3001               	movlw	1
  1815  0137  207A               	fcall	_avControl
  1816  0138  28D2               	goto	l1211
  1817  0139                     l120:	
  1818  0139  0008               	return
  1819  013A                     __end_of_alarm_task:	
  1820                           
  1821 ;; *************** function _alarm_init *****************
  1822 ;; Defined at:
  1823 ;;		line 23 in file "alarm.c"
  1824 ;; Parameters:    Size  Location     Type
  1825 ;;		None
  1826 ;; Auto vars:     Size  Location     Type
  1827 ;;		None
  1828 ;; Return value:  Size  Location     Type
  1829 ;;                  1    wreg      void 
  1830 ;; Registers used:
  1831 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1832 ;; Tracked objects:
  1833 ;;		On entry : 100/0
  1834 ;;		On exit  : 100/0
  1835 ;;		Unchanged: 0/0
  1836 ;; Data sizes:     COMMON   BANK0
  1837 ;;      Params:         0       0
  1838 ;;      Locals:         0       0
  1839 ;;      Temps:          0       0
  1840 ;;      Totals:         0       0
  1841 ;;Total ram usage:        0 bytes
  1842 ;; Hardware stack levels used:    1
  1843 ;; Hardware stack levels required when called:    2
  1844 ;; This function calls:
  1845 ;;		_avControl
  1846 ;; This function is called by:
  1847 ;;		_main
  1848 ;; This function uses a non-reentrant model
  1849 ;;
  1850  013A                     _alarm_init:	
  1851  013A                     l1189:	
  1852                           ;incstack = 0
  1853                           ; Regs used in _alarm_init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1854                           
  1855                           
  1856                           ;alarm.c: 25: samplingCount = 0;
  1857  013A  01B1               	clrf	_samplingCount
  1858  013B                     l1191:	
  1859                           
  1860                           ;alarm.c: 26: pAlarmLevel = mAlarmLevel = 0;
  1861  013B  01A0               	clrf	_mAlarmLevel
  1862  013C  01A1               	clrf	_mAlarmLevel+1
  1863  013D  01A2               	clrf	_mAlarmLevel+2
  1864  013E  01A3               	clrf	_mAlarmLevel+3
  1865  013F  0823               	movf	_mAlarmLevel+3,w
  1866  0140  00A7               	movwf	_pAlarmLevel+3
  1867  0141  0822               	movf	_mAlarmLevel+2,w
  1868  0142  00A6               	movwf	_pAlarmLevel+2
  1869  0143  0821               	movf	_mAlarmLevel+1,w
  1870  0144  00A5               	movwf	_pAlarmLevel+1
  1871  0145  0820               	movf	_mAlarmLevel,w
  1872  0146  00A4               	movwf	_pAlarmLevel
  1873  0147                     l1193:	
  1874                           
  1875                           ;alarm.c: 27: avControl((0), (1));
  1876  0147  01C2               	clrf	avControl@mode
  1877  0148  0AC2               	incf	avControl@mode,f
  1878  0149  3000               	movlw	0
  1879  014A  207A               	fcall	_avControl
  1880  014B                     l1195:	
  1881                           
  1882                           ;alarm.c: 28: avControl( (1) , (0));
  1883  014B  01C2               	clrf	avControl@mode
  1884  014C  3001               	movlw	1
  1885  014D  207A               	fcall	_avControl
  1886  014E                     l116:	
  1887  014E  0008               	return
  1888  014F                     __end_of_alarm_init:	
  1889                           
  1890                           	psect	swtext2
  1891  0286                     __pswtext2:	
  1892  0286                     S1487:	
  1893  0286  288F               	ljmp	l1145
  1894  0287  2898               	ljmp	l1149
  1895  0288  28A2               	ljmp	l1151
  1896  0289  28AC               	ljmp	l1153
  1897  028A  28B6               	ljmp	l1155
  1898                           
  1899                           	psect	text13
  1900  01B7                     __ptext13:	
  1901 ;; *************** function _IntVector *****************
  1902 ;; Defined at:
  1903 ;;		line 56 in file "main.c"
  1904 ;; Parameters:    Size  Location     Type
  1905 ;;		None
  1906 ;; Auto vars:     Size  Location     Type
  1907 ;;  ii              1    3[BANK0 ] PTR unsigned char 
  1908 ;;		 -> crtos2TaskTimer(3), 
  1909 ;; Return value:  Size  Location     Type
  1910 ;;                  1    wreg      void 
  1911 ;; Registers used:
  1912 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1913 ;; Tracked objects:
  1914 ;;		On entry : 0/0
  1915 ;;		On exit  : 100/0
  1916 ;;		Unchanged: 0/0
  1917 ;; Data sizes:     COMMON   BANK0
  1918 ;;      Params:         0       0
  1919 ;;      Locals:         0       1
  1920 ;;      Temps:          0       3
  1921 ;;      Totals:         0       4
  1922 ;;Total ram usage:        4 bytes
  1923 ;; Hardware stack levels used:    1
  1924 ;; This function calls:
  1925 ;;		Nothing
  1926 ;; This function is called by:
  1927 ;;		Interrupt level 1
  1928 ;; This function uses a non-reentrant model
  1929 ;;
  1930                           
  1931                           
  1932                           ;psect for function _IntVector
  1933  01B7                     _IntVector:	
  1934                           
  1935                           ;main.c: 58: if (T0IF)
  1936  01B7  1D0B               	btfss	11,2	;volatile
  1937  01B8  29CD               	goto	i1l69
  1938                           
  1939                           ;main.c: 59: {
  1940                           ;main.c: 60: TMR0 -= (125);
  1941  01B9  307D               	movlw	125
  1942  01BA  0281               	subwf	1,f	;volatile
  1943                           
  1944                           ;main.c: 61: { unsigned char *ii = (unsigned char*)crtos2TaskTimer; while (ii < &crtos2T
      +                          askTimer[(3)]) { if(*ii){--*ii;} ++ii; } };
  1945  01BB  303B               	movlw	(low (_crtos2TaskTimer| 0))& (0+255)
  1946  01BC  00C1               	movwf	IntVector@ii
  1947  01BD                     i1l1349:	
  1948  01BD  303E               	movlw	(low ((_crtos2TaskTimer| 0+3)))& (0+255)
  1949  01BE  0241               	subwf	IntVector@ii,w
  1950  01BF  1803               	btfsc	3,0
  1951  01C0  29CC               	goto	i1l73
  1952  01C1  0841               	movf	IntVector@ii,w
  1953  01C2  0084               	movwf	4
  1954  01C3  1383               	bcf	3,7	;select IRP bank0
  1955  01C4  0800               	movf	0,w
  1956  01C5  1903               	btfsc	3,2
  1957  01C6  29CA               	goto	i1l1347
  1958  01C7  0841               	movf	IntVector@ii,w
  1959  01C8  0084               	movwf	4
  1960  01C9  0380               	decf	0,f
  1961  01CA                     i1l1347:	
  1962  01CA  0AC1               	incf	IntVector@ii,f
  1963  01CB  29BD               	goto	i1l1349
  1964  01CC                     i1l73:	
  1965                           
  1966                           ;main.c: 62: T0IF = 0;
  1967  01CC  110B               	bcf	11,2	;volatile
  1968  01CD                     i1l69:	
  1969                           
  1970                           ;main.c: 63: }
  1971                           ;main.c: 67: if (TMR1IF)
  1972  01CD  1C0C               	btfss	12,0	;volatile
  1973  01CE  29DF               	goto	i1l1357
  1974                           
  1975                           ;main.c: 68: {
  1976                           ;main.c: 69: if(++tmr1Hi16==0) {tmr1Overflowed32=1;}
  1977  01CF  0AAC               	incf	_tmr1Hi16,f	;volatile
  1978  01D0  1903               	skipnz
  1979  01D1  0AAD               	incf	_tmr1Hi16+1,f	;volatile
  1980  01D2  1903               	skipnz
  1981  01D3  0AAE               	incf	_tmr1Hi16+2,f	;volatile
  1982  01D4  1903               	skipnz
  1983  01D5  0AAF               	incf	_tmr1Hi16+3,f	;volatile
  1984  01D6  082F               	movf	_tmr1Hi16+3,w	;volatile
  1985  01D7  042E               	iorwf	_tmr1Hi16+2,w	;volatile
  1986  01D8  042D               	iorwf	_tmr1Hi16+1,w	;volatile
  1987  01D9  042C               	iorwf	_tmr1Hi16,w	;volatile
  1988  01DA  1D03               	skipz
  1989  01DB  29DE               	goto	i1l1355
  1990  01DC  3001               	movlw	1
  1991  01DD  00B2               	movwf	_tmr1Overflowed32	;volatile
  1992  01DE                     i1l1355:	
  1993                           
  1994                           ;main.c: 70: TMR1IF = 0;
  1995  01DE  100C               	bcf	12,0	;volatile
  1996  01DF                     i1l1357:	
  1997                           
  1998                           ;main.c: 71: }
  1999                           ;main.c: 75: if (GPIF)
  2000  01DF  1C0B               	btfss	11,0	;volatile
  2001  01E0  2A0F               	goto	i1l81
  2002                           
  2003                           ;main.c: 76: {
  2004                           ;main.c: 80: (GPIO5) = 0;
  2005  01E1  1285               	bcf	5,5	;volatile
  2006                           
  2007                           ;main.c: 85: GPIF = 0;
  2008  01E2  100B               	bcf	11,0	;volatile
  2009                           
  2010                           ;main.c: 89: TMR1ON = 0;
  2011  01E3  1010               	bcf	16,0	;volatile
  2012                           
  2013                           ;main.c: 93: pulseInterval.bytes.C1 = TMR1H;
  2014  01E4  080F               	movf	15,w	;volatile
  2015  01E5  00A9               	movwf	_pulseInterval+1	;volatile
  2016                           
  2017                           ;main.c: 94: pulseInterval.bytes.C0 = TMR1L;
  2018  01E6  080E               	movf	14,w	;volatile
  2019  01E7  00A8               	movwf	_pulseInterval	;volatile
  2020                           
  2021                           ;main.c: 95: TMR1H = 0;
  2022  01E8  018F               	clrf	15	;volatile
  2023                           
  2024                           ;main.c: 96: TMR1L = 0;
  2025  01E9  018E               	clrf	14	;volatile
  2026                           
  2027                           ;main.c: 100: TMR1ON = 1;
  2028  01EA  1410               	bsf	16,0	;volatile
  2029                           
  2030                           ;main.c: 105: if (TMR1IF)
  2031  01EB  1C0C               	btfss	12,0	;volatile
  2032  01EC  29FD               	goto	i1l1377
  2033                           
  2034                           ;main.c: 106: {
  2035                           ;main.c: 107: if(++tmr1Hi16==0) {tmr1Overflowed32=1;}
  2036  01ED  0AAC               	incf	_tmr1Hi16,f	;volatile
  2037  01EE  1903               	skipnz
  2038  01EF  0AAD               	incf	_tmr1Hi16+1,f	;volatile
  2039  01F0  1903               	skipnz
  2040  01F1  0AAE               	incf	_tmr1Hi16+2,f	;volatile
  2041  01F2  1903               	skipnz
  2042  01F3  0AAF               	incf	_tmr1Hi16+3,f	;volatile
  2043  01F4  082F               	movf	_tmr1Hi16+3,w	;volatile
  2044  01F5  042E               	iorwf	_tmr1Hi16+2,w	;volatile
  2045  01F6  042D               	iorwf	_tmr1Hi16+1,w	;volatile
  2046  01F7  042C               	iorwf	_tmr1Hi16,w	;volatile
  2047  01F8  1D03               	skipz
  2048  01F9  29FC               	goto	i1l1375
  2049  01FA  3001               	movlw	1
  2050  01FB  00B2               	movwf	_tmr1Overflowed32	;volatile
  2051  01FC                     i1l1375:	
  2052                           
  2053                           ;main.c: 108: TMR1IF =0;
  2054  01FC  100C               	bcf	12,0	;volatile
  2055  01FD                     i1l1377:	
  2056                           
  2057                           ;main.c: 109: }
  2058                           ;main.c: 113: if (tmr1Overflowed32)
  2059  01FD  0832               	movf	_tmr1Overflowed32,w	;volatile
  2060  01FE  1903               	btfsc	3,2
  2061  01FF  2A07               	goto	i1l1383
  2062                           
  2063                           ;main.c: 114: {
  2064                           ;main.c: 115: pulseInterval.value = (4294967295UL);
  2065  0200  30FF               	movlw	255
  2066  0201  00A8               	movwf	_pulseInterval	;volatile
  2067  0202  00A9               	movwf	_pulseInterval+1	;volatile
  2068  0203  00AA               	movwf	_pulseInterval+2	;volatile
  2069  0204  00AB               	movwf	_pulseInterval+3	;volatile
  2070                           
  2071                           ;main.c: 116: tmr1Overflowed32 = 0;
  2072  0205  01B2               	clrf	_tmr1Overflowed32	;volatile
  2073                           
  2074                           ;main.c: 117: }
  2075  0206  2A0B               	goto	i1l1385
  2076  0207                     i1l1383:	
  2077                           
  2078                           ;main.c: 118: else
  2079                           ;main.c: 119: {
  2080                           ;main.c: 120: pulseInterval.words.W1 = tmr1Hi16;
  2081  0207  082D               	movf	_tmr1Hi16+1,w	;volatile
  2082  0208  00AB               	movwf	_pulseInterval+3	;volatile
  2083  0209  082C               	movf	_tmr1Hi16,w	;volatile
  2084  020A  00AA               	movwf	_pulseInterval+2	;volatile
  2085  020B                     i1l1385:	
  2086                           
  2087                           ;main.c: 121: }
  2088                           ;main.c: 128: tmr1Hi16 = 0;
  2089  020B  01AC               	clrf	_tmr1Hi16	;volatile
  2090  020C  01AD               	clrf	_tmr1Hi16+1	;volatile
  2091  020D  01AE               	clrf	_tmr1Hi16+2	;volatile
  2092  020E  01AF               	clrf	_tmr1Hi16+3	;volatile
  2093  020F                     i1l81:	
  2094  020F  0840               	movf	??_IntVector+2,w
  2095  0210  008A               	movwf	10
  2096  0211  083F               	movf	??_IntVector+1,w
  2097  0212  0084               	movwf	4
  2098  0213  0E3E               	swapf	??_IntVector^0,w
  2099  0214  0083               	movwf	3
  2100  0215  0EDE               	swapf	94,f
  2101  0216  0E5E               	swapf	94,w
  2102  0217  0009               	retfie
  2103  0218                     __end_of_IntVector:	
  2104  005E                     btemp	set	94	;btemp
  2105  005E                     wtemp0	set	94
  2106                           
  2107                           	psect	intentry
  2108  0004                     __pintentry:	
  2109                           ;incstack = 0
  2110                           ; Regs used in _IntVector: [wreg-fsr0h+status,2+status,0]
  2111                           
  2112  0004                     interrupt_function:	
  2113  005E                     saved_w	set	btemp
  2114  0004  00DE               	movwf	btemp
  2115  0005  0E03               	swapf	3,w
  2116  0006  1283               	bcf	3,5	;RP0=0, select bank0
  2117  0007  00BE               	movwf	??_IntVector
  2118  0008  0804               	movf	4,w
  2119  0009  00BF               	movwf	??_IntVector+1
  2120  000A  080A               	movf	10,w
  2121  000B  00C0               	movwf	??_IntVector+2
  2122  000C  29B7               	ljmp	_IntVector


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         30
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON            0      0       0
    BANK0            62     16      47

Pointer List with Targets:

    avControl@c	PTR struct avControlStruct size(1) Largest target is 8
		 -> avc(BANK0[8]), 

    IntVector@ii	PTR unsigned char  size(1) Largest target is 3
		 -> crtos2TaskTimer(BANK0[3]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _IntVector in COMMON

    None.

Critical Paths under _main in BANK0

    _set_threshold_task->_opSetMainAlarmFromCapture
    _opSetMainAlarmFromCapture->_opSetMainAlarmByValue
    _opSetMainAlarmByValue->_DATAEE_WriteByte
    _opSetMainAlarmFromEE->_DATAEE_ReadByte
    _opSetAlarmSamplingFromEE->_DATAEE_ReadByte
    _av_control_task_init->_avControl
    _alarm_task->_avControl
    _alarm_init->_avControl

Critical Paths under _IntVector in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    4422
                                             14 BANK0      2     2      0
                         _alarm_init
                         _alarm_task
                    _av_control_task
               _av_control_task_init
           _opSetAlarmSamplingFromEE
               _opSetMainAlarmFromEE
                 _set_threshold_task
 ---------------------------------------------------------------------------------
 (1) _set_threshold_task                                   0     0      0     938
          _opSetMainAlarmFromCapture
 ---------------------------------------------------------------------------------
 (2) _opSetMainAlarmFromCapture                            4     4      0     938
                                             10 BANK0      4     4      0
              _opSetMainAlarmByValue
 ---------------------------------------------------------------------------------
 (3) _opSetMainAlarmByValue                                4     0      4     915
                                              6 BANK0      4     0      4
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (4) _DATAEE_WriteByte                                     2     1      1     663
                                              4 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _opSetMainAlarmFromEE                                 4     4      0     117
                                              5 BANK0      4     4      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (1) _opSetAlarmSamplingFromEE                             0     0      0      22
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (2) _DATAEE_ReadByte                                      1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _av_control_task_init                                 0     0      0    1047
                          _avControl
 ---------------------------------------------------------------------------------
 (1) _av_control_task                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _alarm_task                                           4     4      0    1114
                                              8 BANK0      4     4      0
                          _avControl
 ---------------------------------------------------------------------------------
 (1) _alarm_init                                           0     0      0    1047
                          _avControl
 ---------------------------------------------------------------------------------
 (2) _avControl                                            4     3      1    1047
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _IntVector                                            4     4      0      68
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _alarm_init
     _avControl
   _alarm_task
     _avControl
   _av_control_task
   _av_control_task_init
     _avControl
   _opSetAlarmSamplingFromEE
     _DATAEE_ReadByte
   _opSetMainAlarmFromEE
     _DATAEE_ReadByte
   _set_threshold_task
     _opSetMainAlarmFromCapture
       _opSetMainAlarmByValue
         _DATAEE_WriteByte

 _IntVector (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               3E     10      2F       4       75.8%
BITBANK0            3E      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               0      0       0       1        0.0%
BITCOMMON            0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      2F       6        0.0%
ABS                  0      0      2F       5        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Fri Mar 13 22:04:47 2020

                        __CFG_CP$ON 0000                                   _i 0030  
                                 pc 0002                                  l92 025E  
                                l86 0239                                  fsr 0004  
                               l120 0139                                 l200 0198  
                               l116 014E                                 l222 015B  
                               l215 01B6                                 l128 0135  
                               l209 01B1                                 l138 00CA  
                               l227 0168                                 l149 001B  
                               l168 0079                                 l194 017C  
                 ??_av_control_task 0000                                 _GIE 005F  
                               _IOC 0096                                 u400 00F1  
                               u401 00F0                                 u410 010C  
                               u411 010B                                 u420 011A  
                               u500 0047                                 u421 0119  
                               u405 00ED                                 u501 0046  
                               u430 012D                                 u510 0050  
                               u431 012C                                 u415 0108  
                               u511 004F                                 u520 0055  
                               u440 0022                                 u433 0129  
                               u521 0054                                 u441 0021  
                               u370 0081                                 u530 005A  
                               u450 0027                        __CFG_CPD$OFF 0000  
                               u371 0080                                 u531 0059  
                               u451 0026                                 u540 0060  
                               u460 002C                                 u541 005F  
                               u461 002B                                 u390 00D2  
                               u550 006A                                 u470 0032  
                               u391 00D1                                 u551 0069  
                               u471 0031                                 u560 006F  
                               u480 003C                                 u385 0085  
                               u561 006E                                 u481 003B  
                               u570 0075                                 u490 0041  
                               u571 0074                                 u491 0040  
                               u580 015F                                 u581 015E  
                               u590 0167                                 u591 0166  
                               u690 0231                                 _WPU 0095  
                               _avc 0033                       _pulseInterval 0028  
                _set_threshold_task 014F                                 fsr0 0004  
                               indf 0000                        __CFG_IDLOC0$ 0070  
                      __CFG_IDLOC1$ 0075                        __CFG_IDLOC2$ 006C  
                      __CFG_IDLOC3$ 0073                                S1485 0001  
                              S1487 0286                                l1201 01A9  
                              l1211 00D2                                l1131 0189  
                              l1221 00DE                                l1205 01B2  
                              l1133 018E                                l1151 00A2  
                              l1143 0082                                l1231 0115  
                              l1223 00DF                                l1215 00D4  
                              l1135 0193                                l1127 017D  
                              l1153 00AC                                l1145 008F  
                              l1233 011A                                l1225 00F1  
                              l1217 00D5                                l1209 00CB  
                              l1129 0185                                l1321 0160  
                              l1305 0150                                l1155 00B6  
                              l1147 0093                                l1163 00BF  
                              l1139 007B                                l1235 012D  
                              l1227 00FA                                l1219 00D6  
                              l1251 002C                                l1243 001C  
                              l1171 016A                                l1323 0161  
                              l1307 0151                                l1315 0153  
                              l1157 00BB                                l1149 0098  
                              l1237 0131                                l1229 010C  
                              l1261 003C                                l1253 0032  
                              l1245 001D                                l1173 0172  
                              l1325 0162                                l1405 0233  
                              l1191 013B                                l1271 004B  
                              l1263 0041                                l1255 0033  
                              l1247 0022                                l1175 0173  
                              l1431 0250                                l1193 0147  
                              l1281 0061                                l1273 0050  
                              l1265 0047                                l1257 0035  
                              l1249 0027                                l1185 0017  
                              l1169 0169                                l1195 014B  
                              l1291 0075                                l1283 0063  
                              l1275 0055                                l1267 0049  
                              l1259 0037                                l1427 024C  
                              l1435 0253                                l1189 013A  
                              l1293 0077                                l1277 005A  
                              l1285 0065                                l1269 004A  
                              l1429 024E                                l1287 006A  
                              l1279 0060                                l1295 0078  
                              l1199 0199                                l1289 006F  
                              l1299 014F                 ?_set_threshold_task 003E  
                      __CFG_WDTE$ON 0000                                _T0IE 005D  
                              _T0IF 005A       __size_of_av_control_task_init 0005  
                              _GPIF 0058                                _GPIO 0005  
                              i1l81 020F                                i1l73 01CC  
                              i1l69 01CD                                _TMR0 0001  
                              _main 0218                                btemp 005E  
                     __CFG_BOREN$ON 0000                                start 000D  
              ??_set_threshold_task 0000              ??_opSetMainAlarmFromEE 0000  
         __size_of_DATAEE_WriteByte 0011                               ?_main 003E  
                             _EEADR 009B                               _CMCON 0019  
                             _ANSEL 009F                               _T1CON 0010  
                             _GPIO1 0029                               _GPIO2 002A  
                             _GPIO4 002C                               _GPIO5 002D  
                             _TMR1H 000F                               _TMR1L 000E  
                     __CFG_PWRTE$ON 0000                     _DATAEE_ReadByte 0280  
                             main@i 004D                               main@t 004C  
                             pclath 000A                         IntVector@ii 0041  
__size_of_opSetMainAlarmFromCapture 0014                               status 0003  
                             wtemp0 005E                      __CFG_MCLRE$OFF 0000  
                   __initialization 000E                        __end_of_main 0267  
           ??_opSetMainAlarmByValue 0000                              ??_main 0000  
                     avControl@item 0044                       avControl@mode 0042  
                            _EEDATA 009A                              _EECON2 009D  
          _opSetAlarmSamplingFromEE 01B2                              i1l1355 01DE  
                            i1l1347 01CA                              i1l1357 01DF  
                            i1l1349 01BD                              i1l1383 0207  
                            i1l1375 01FC                              i1l1385 020B  
                            i1l1377 01FD                              _INTCON 000B  
                            _TMR1IE 0460                              _TMR1IF 0060  
                            _TMR1ON 0080                              _TRISIO 0085  
                    _sampleInterval 004E                  __size_of_IntVector 0061  
 __end_of_opSetMainAlarmFromCapture 017D             __end_of_DATAEE_ReadByte 0286  
                            saved_w 005E             __end_of__initialization 0015  
                   _av_control_task 001C                      __pcstackCOMMON 0000  
                __size_of_avControl 0051                        __pidataBANK0 0000  
                  _DATAEE_WriteByte 0267                   __end_of_IntVector 0218  
                        __pbssBANK0 0020                          _alarm_init 013A  
                        _alarm_task 00CB              opSetMainAlarmByValue@x 0044  
                        __pmaintext 0218        __end_of_av_control_task_init 001C  
                        __pintentry 0004                    ?_DATAEE_ReadByte 003E  
                 __end_of_avControl 00CB             __end_of_av_control_task 007A  
              DATAEE_WriteByte@bAdd 0043                          avControl@c 0045  
       __size_of_set_threshold_task 001A                             __palarm 00CB  
     __size_of_opSetMainAlarmFromEE 0019                             __ptext4 0267  
                           __ptext7 0280      __size_of_opSetMainAlarmByValue 001C  
     __end_of_opSetMainAlarmByValue 0199          ??_opSetAlarmSamplingFromEE 0000  
                           clrloop0 0279                end_of_initialization 0015  
                       ?_alarm_init 003E                         ?_alarm_task 003E  
                   _crtos2TaskTimer 003B                    _tmr1Overflowed32 0032  
        opSetMainAlarmFromCapture@x 0048                         _mAlarmLevel 0020  
          __end_of_DATAEE_WriteByte 0278                _av_control_task_init 0017  
                  ?_av_control_task 003E          ?_opSetMainAlarmFromCapture 003E  
                       _pAlarmLevel 0024                 __size_of_alarm_init 0015  
               __size_of_alarm_task 006F                 start_initialization 000E  
                         _IntVector 01B7               ?_av_control_task_init 003E  
               DATAEE_ReadByte@bAdd 0042                         __pdataBANK0 004E  
  __end_of_opSetAlarmSamplingFromEE 01B7                       _samplingCount 0031  
                         ___latbits 0000                       __pcstackBANK0 003E  
                        ?_IntVector 003E                           _avControl 007A  
                         __popParam 014F               opSetMainAlarmFromEE@x 0043  
                         __pswtext1 0001                           __pswtext2 0286  
            ??_av_control_task_init 0000            __size_of_DATAEE_ReadByte 0006  
      __end_of_opSetMainAlarmFromEE 01B2                   interrupt_function 0004  
                        ?_avControl 0042                        ??_alarm_init 0000  
                      ??_alarm_task 0000                           clear_ram0 0278  
        __end_of_set_threshold_task 0169               _opSetMainAlarmByValue 017D  
                __end_of_alarm_init 014F                  __end_of_alarm_task 013A  
             DATAEE_WriteByte@bData 0042                         ??_IntVector 003E  
                 ?_DATAEE_WriteByte 0042   __size_of_opSetAlarmSamplingFromEE 0005  
                ??_DATAEE_WriteByte 0000           ?_opSetAlarmSamplingFromEE 003E  
                        _EECON1bits 009C         ??_opSetMainAlarmFromCapture 0000  
                          __paudVis 0017                            __ptext13 01B7  
                       ??_avControl 0043                       __size_of_main 004F  
                          _tmr1Hi16 002C                   ??_DATAEE_ReadByte 0000  
                       alarm_task@x 0046            __size_of_av_control_task 005E  
              _opSetMainAlarmFromEE 0199              ?_opSetMainAlarmByValue 0044  
                        _INTCONbits 000B           _opSetMainAlarmFromCapture 0169  
                          intlevel1 0000               ?_opSetMainAlarmFromEE 003E  
                        _OPTION_REG 0081                   __CFG_FOSC$INTRCIO 0000  
